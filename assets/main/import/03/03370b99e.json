[1,["f6fClb6DFLuJscrMOWbJoj@6c48a","45jjIOmzlGAYwv7uO5UmMm","c71Zn78aZBbpJL/HYW1TTr","c2RpKfc6xMZKTb+QNyaBn2","03Fa03AkJMNorXeg3JdFoc@7616d","03Fa03AkJMNorXeg3JdFoc@d26bd","03Fa03AkJMNorXeg3JdFoc@96692","f6SJZOjTJB/JrJeh5xTdF7","03Fa03AkJMNorXeg3JdFoc","03Fa03AkJMNorXeg3JdFoc@7209d","03Fa03AkJMNorXeg3JdFoc@304ca","03Fa03AkJMNorXeg3JdFoc@7254a","03Fa03AkJMNorXeg3JdFoc@1b909","03Fa03AkJMNorXeg3JdFoc@bc29b","03Fa03AkJMNorXeg3JdFoc@bacc3","8bgucuRPxB5LRJVGtUTJag","4bYv6mRupOR5OKM6c48WP1","5f08myTAxHJLSpx/5jD3PZ","a3tcYOLwhE1qWeaq6uQY4w","8fA/a7fhJEZblmCe6an2Eh@6c48a","03Fa03AkJMNorXeg3JdFoc@747a1","03Fa03AkJMNorXeg3JdFoc@523e6","03Fa03AkJMNorXeg3JdFoc@7ff24","5f2tpxHvJEG7+igLyyy8Fj@010d1","05uicJ+4hMWaVeRUW/qVYc@6c48a","33o0gGO9pPC7ffRbPtw6nY@a05ff","19REqqqG9Ix7KNSOn5nQ/3@3bfe5","34q/txkyxIVompoEyrNC/1@010d1","035FUgKCRChrfKVN0WFNTF@84d36","aek5KiduNEKowQNd/q7GKg@2228c","08sX+6ebNJOK4Rhf0wns58@98739","03Fa03AkJMNorXeg3JdFoc@ed7ce","28pTbh4pFEE5543S0n5O0N@e7740","03Fa03AkJMNorXeg3JdFoc@a4bfa","03Fa03AkJMNorXeg3JdFoc@2d3a9","03Fa03AkJMNorXeg3JdFoc@37dd9","03Fa03AkJMNorXeg3JdFoc@a950b","03Fa03AkJMNorXeg3JdFoc@c622f","03Fa03AkJMNorXeg3JdFoc@c45ee","03Fa03AkJMNorXeg3JdFoc@2aec9","03Fa03AkJMNorXeg3JdFoc@cdaef","03Fa03AkJMNorXeg3JdFoc@24824","03Fa03AkJMNorXeg3JdFoc@9abc5","03Fa03AkJMNorXeg3JdFoc@4f450","63u02LalRJcIMbn9uM56/k","e7WJnKo9xL+alQuT9oyTBA","6bvpRG2jVJXo7DLlPyDC2m","75jDCD9C9DWrnSWhR1Ypvw","acmSHyPHlPQ4eH+5WY5Nvy","03IdOL+bBHG5ThN8/0BwQe","03Fa03AkJMNorXeg3JdFoc@27a1c","80VBVqsKRGp7d4dZgLrPcb@98739","2bnEFslaNNCZDkOTDpVk9S@98739","d1NGQ2rJZCcbhjH0/erZWw","66jK1u321DTbgoaY5WoiG2","08sX+6ebNJOK4Rhf0wns58@935df","08sX+6ebNJOK4Rhf0wns58@8f8aa","08sX+6ebNJOK4Rhf0wns58@70e06","08sX+6ebNJOK4Rhf0wns58@438fe","08sX+6ebNJOK4Rhf0wns58@c45fa","08sX+6ebNJOK4Rhf0wns58@bef90","08sX+6ebNJOK4Rhf0wns58@eecaf","08sX+6ebNJOK4Rhf0wns58@b663a","08sX+6ebNJOK4Rhf0wns58@d405f","ba/bRVqJRGtY+lOow1zqRc@20340","75DRes0YREio0njekSk8cR@475f3","03Fa03AkJMNorXeg3JdFoc@45f1f","24pwTaKGdEbY0aXpIMdeCd@6c48a","28pTbh4pFEE5543S0n5O0N@87811","28pTbh4pFEE5543S0n5O0N@01b19","28pTbh4pFEE5543S0n5O0N@4f17a","12hc0+kFBO+roAe5+R69A6@eb219","30zaAKKBpO2K/F+Fn4ALxl@ab932","30zaAKKBpO2K/F+Fn4ALxl@5c895","30zaAKKBpO2K/F+Fn4ALxl@46540","338+z7nhxGBLjl4/pT+fUd@6c48a","05UgtNR5RIaZVtK9VNUqn9@401e4","03Fa03AkJMNorXeg3JdFoc@74ac4","03Fa03AkJMNorXeg3JdFoc@fc8e2","03Fa03AkJMNorXeg3JdFoc@52c89","03Fa03AkJMNorXeg3JdFoc@d10ad","03Fa03AkJMNorXeg3JdFoc@d025f","1aIQ1hKRVPra/xfk2CnAjx","03Fa03AkJMNorXeg3JdFoc@7d705","03Fa03AkJMNorXeg3JdFoc@63d49","03Fa03AkJMNorXeg3JdFoc@13abf","03Fa03AkJMNorXeg3JdFoc@50fd6","cdGKAnCZJBk6HDIA3C88/y","295Ru5h1dKR7oRLmRHFl+O","12U9UjV65F1KTl/TlQgeRF","28pTbh4pFEE5543S0n5O0N@bcc24","edrO8mgxNJHJ8szcv87KLX","95qKFER5BICosRf5NifmJQ","03Fa03AkJMNorXeg3JdFoc@dcf0f","03Fa03AkJMNorXeg3JdFoc@5fd93","03Fa03AkJMNorXeg3JdFoc@9f07c","ccH2fqfStBaolIws/fblYv@b95d3","e7uZSgqypAxa+v7bPep4RT","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","338+z7nhxGBLjl4/pT+fUd@f9941","12Y9dMgWdJKJGmTiZyQR9H@2e76e","dfPTZF/tVGkImBp+LGeN3V","55Q5yHmcVPdp/DliyqBjea@3b1e0","18kLvtNWJBOafv5vz/VF/U@bd07c","80VBVqsKRGp7d4dZgLrPcb@a9549","80VBVqsKRGp7d4dZgLrPcb@b4e6b","80VBVqsKRGp7d4dZgLrPcb@9ed87","80VBVqsKRGp7d4dZgLrPcb@438fe","80VBVqsKRGp7d4dZgLrPcb@bef90","2bnEFslaNNCZDkOTDpVk9S@935df","2bnEFslaNNCZDkOTDpVk9S@8f8aa","2bnEFslaNNCZDkOTDpVk9S@76e66","2bnEFslaNNCZDkOTDpVk9S@438fe","2bnEFslaNNCZDkOTDpVk9S@bef90","86XnI20xlH6aOdxPylHEmd@1149d","fcJn9nnqJELbEMOyAJtRBI@72a8a","fcJn9nnqJELbEMOyAJtRBI@b0535","9f2QDdIhtPiY8s+6NCQ8g1@6c48a","acDvIG2D1A4qbjdkv6h7H+@a9549","acDvIG2D1A4qbjdkv6h7H+@5c108","acDvIG2D1A4qbjdkv6h7H+@fd394","acDvIG2D1A4qbjdkv6h7H+@438fe","acDvIG2D1A4qbjdkv6h7H+@98739","acDvIG2D1A4qbjdkv6h7H+@c45fa","acDvIG2D1A4qbjdkv6h7H+@bef90","acDvIG2D1A4qbjdkv6h7H+@eecaf","acDvIG2D1A4qbjdkv6h7H+@b663a","acDvIG2D1A4qbjdkv6h7H+@d405f","7aUNhj3fZJvoqXNvtlXdVC@a50e2","03Fa03AkJMNorXeg3JdFoc@ffb04","30zaAKKBpO2K/F+Fn4ALxl@c6d20","d6qhcpVONJSLiaqo/c/JMt@15a14","79JefUyNxLg5rKGCWvcnQc","39Poq9dcFFuZ1+KgfO3VX+@6c48a","1brw/JvvpFnIvdrxpFCgMZ","ccH2fqfStBaolIws/fblYv@9d093","ccH2fqfStBaolIws/fblYv@5f1bd","ebDrlyLcRBbpBl1QOxos+R@99cfd","a0VKqtopBAy7UPallFq1rq@2a9e9","d6qhcpVONJSLiaqo/c/JMt@5c895","d6qhcpVONJSLiaqo/c/JMt@46540","d6qhcpVONJSLiaqo/c/JMt@ab932","18d+B+pINLsKs59RzGu1TH@61bd1","03Fa03AkJMNorXeg3JdFoc@f1bbe","9f2QDdIhtPiY8s+6NCQ8g1@f9941","b2AKk5hi9MD7PBkvVWHjb8","87w3AZ7aVCypwnooMTZLlq","bcDAvFuIVJPZn96b9iqDc9","97eRGCDb5JuKGfIv+lYKzU","a1dpwhxRROkJP54nzfrmMs","51YmBykEpNrIG2LkUNIR3l","4b2yo1oCdLGYQwK6HZmZ9f","35hIGYYoxIW7qz0D3rPAcb","10gQB4vP9F+anr16Ov+NBJ","52T6piClREvZxQalg9ns3d","87r22mqb5O/Y44/ltTJuC6","b41PKhOGNHLbTiMkMgdjfF","e0ENNmzOtEEoWGCHEY7MW0","0dmEjPfEZMY7wEcvXUNpj3","cdfxgMgY1CooU0otLKPjel","9bpg3Ibk1CJqp+mp+JlIU8","24pwTaKGdEbY0aXpIMdeCd@f9941"],["node","_spriteFrame","root","_textureSource","_parent","asset","_mesh","_normalSprite","_font","data","targetInfo","_effectAsset","value","uiAtlas","_defaultClip","mainTexture","_skeleton","_particleSystem","_cpuMaterial","_mainTexture","font","_target","_userDefinedFont","_imageAtlas","_cameraComponent","camera","scene","questItem","plantPrefab","_envmapHDR","_envmapLDR","spriteFrame","currencyEffectPrefab","actionParticlePrefab","_barSprite","glowingParticlePrefab"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_parent","_components","_prefab","_children","_lpos","_lscale","_lrot","_euler"],-3,1,9,4,2,5,5,5,5],"cc.ImageAsset",["cc.Sprite",["_sizeMode","_type","_useGrayscale","node","_spriteFrame","__prefab","_color"],0,1,6,4,5],["cc.Node",["_name","_objFlags","_id","_parent","_prefab","_lpos","_lrot","_euler","_components","_children","__editorExtras__"],0,1,4,5,5,5,2,9,11],["cc.CurveRange",["mode","constantMax","constantMin","constant","multiplier","spline"],-2,4],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Button",["_transition","_zoomScale","node","_normalSprite","clickEvents","__prefab","_normalColor","_target"],1,1,6,9,4,5,1],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_fontSize","_lineHeight","_cacheMode","_overflow","_enableWrapText","_verticalAlign","_horizontalAlign","node","_font","__prefab"],-7,1,6,4],["cc.Widget",["_alignFlags","_bottom","_left","_right","_top","_originalWidth","node"],-3,1],["cc.RealKeyframeValue",["interpolationMode","value","rightTangent","leftTangent"],-1],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents"],1,9,9,9],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.GradientRange",["_mode","color","colorMin","colorMax","gradient"],2,5,5,5,4],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.ParticleSystem",["duration","_simulationSpace","loop","playOnAwake","_capacity","scaleSpace","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer"],-3,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ShapeModule",["_enable","radius","length","_angle","emitFrom","radiusThickness","_shapeType","arcSpeed","_scale"],-4,4,5],"cc.TextureCube",["cc.Prefab",["_name"],2],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.MeshRenderer",["_name","node","__prefab","_materials","lightmapSettings","_mesh"],2,1,4,3,4,6],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.RealCurve",["_times","preExtrapolation","_values"],1,9],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.Animation",["playOnLoad","_clips","_defaultClip","node","__prefab"],2,3,6,1,4],["cc.Camera",["_projection","_orthoHeight","_far","_visibility","_near","_priority","_clearFlags","node","_color"],-4,1,5],["cc.ColorKey",["time","color"],2,5],["cc.AlphaKey",["alpha","time"],1],"cc.SpriteAtlas",["cc.Node",["_objFlags","_parent","_prefab","__editorExtras__"],2,4,4,11],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab"],1,1,12,9,4],["cc.Node",["_name","_layer","_parent","_components","_prefab","_lpos"],1,1,12,4,5],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.MeshRenderer",["_materials","node","__prefab","lightmapSettings","_mesh"],2,1,4,4,6],["cc.ParticleSystem",["scaleSpace","duration","_simulationSpace","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer"],0,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.NoiseModule",[],3],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_cpuMaterial","_mainTexture"],3,6,6],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["f1b36959pFKfZ6QG9FL2X6r",["node","camera"],3,1,1],["52392Kv+75Ok4lgRKkKNTQr",["node","uiAtlas"],3,1,6],["9ddefGqg0dAVpQkQmCMz4vd",["node","uiAtlas"],3,1,6],["9b1c1zbOpxDVKxzk5lxxiVx",["node"],3,1],["dbb14WtoL9BmLPG77ufF+Zl",["node","buttonTabs","uiAtlas","font"],3,1,2,6,6],["16f09yXeOdJM4fH9sPZLJVk",["node","buttonTabs","uiAtlas","font"],3,1,2,6,6],["3235dIxgRxG+6qViEfVOLYg",["node"],3,1],["e23dbIcS0ZDUZvGDV5r1AiR",["node","uiAtlas"],3,1,6],["fac1fMiiYxACaxGF9i1K3DY",["node"],3,1],["88b43Dzh+dBnLrzmp5945Wu",["node","uiAtlas","font"],3,1,6,6],["1baeadzTg9F1IHpiABy5qB2",["node","uiAtlas","font","questItem"],3,1,6,6,6],["cc.Scene",["_name","_children","_prefab","_globals"],2,12,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_distance","_shadowColor"],2,5],["cc.SkyboxInfo",["_enabled","_rotationAngle","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",["_enabled","_fogStart","_fogEnd","_fogColor"],0,5],["cc.OctreeInfo",[],3],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.BlockInputEvents",["node"],3,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.RichText",["_lineHeight","_string","_fontSize","_isSystemFontUsed","_handleTouchEvent","node","_font","_userDefinedFont","_imageAtlas"],-2,1,6,6,6],["cc.DirectionalLight",["_useColorTemperature","_colorTemperature","_illuminanceHDR","_shadowEnabled","node","_color","_staticSettings"],-1,1,5,4],["cc.StaticLightSettings",["_castShadow"],2],["734feVQSzdG76tFES30ltsr",["node","plantPrefab"],3,1,6],["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["7844eqBZCNIzIv1ZtYRaDYe",["node","__prefab","renderAnimalPrefabs","uiAtlas","currencyEffectPrefab"],3,1,4,3,6,6],["cc.RenderRoot2D",["node","__prefab"],3,1,4],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["aadc9bErLFGTq848KEPIpSM",["node","__prefab","actionParticlePrefab"],3,1,4,6],["7865329OKBPiq+nR+pIYnyH",["node","__prefab","renderPlantPrefabs","uiAtlas","glowingParticlePrefab"],3,1,4,9,6,6],["PlantPrefabPair",["key","values"],2,3],["cc.ProgressBar",["_totalLength","_progress","node","__prefab","_barSprite"],1,1,4,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[12,0,2,3,2],[71,0,2],[34,0,2],[6,0,1,1],[77,0,1,2,2],[5,1],[73,0,1,2,2],[1,0,1,6,7,10,3],[1,0,6,9,8,10,12,13,2],[3,3,4,1],[35,0,1,2,3,2],[1,0,6,8,10,2],[4,0,3,9,4,5,6,7,2],[1,4,5,6,8,3],[37,1],[74,0,1,2,3],[1,0,1,6,7,10,11,3],[20,1,2,3,4,5,1],[3,1,0,3,4,3],[11,0,2,2],[18,0,2],[25,0,1,3,3],[7,0,1,2,4,3,3],[38,0,1,2,3],[72,0,1,2,3],[5,3,2],[6,0,1],[1,0,1,6,7,3],[8,0,8,1,3,4,2,5,10,11,8],[1,0,9,8,10,2],[1,0,9,8,2],[1,0,1,6,9,7,10,3],[6,0,2,1,1],[6,0,1,3,1],[3,3,5,4,1],[75,0,1,2,2],[1,0,6,7,8,10,12,11,13,2],[1,0,6,7,8,10,11,2],[14,2,0,1,4,4],[6,0,2,1],[1,0,9,7,8,2],[1,0,1,6,9,7,10,11,3],[13,1],[1,0,6,7,8,12,11,13,2],[5,0,5,2],[23,1,0,2,3],[11,0,1,2,3],[1,0,6,7,8,11,2],[1,0,3,1,6,9,7,4],[1,0,6,7,8,10,2],[6,0,2,1,3,1],[3,1,0,3,6,4,3],[78,0,1],[10,0,1,2,3,5],[8,0,1,2,10,11,4],[1,0,1,6,7,8,10,11,3],[1,0,1,6,7,8,10,3],[13,0,2,3,2],[5,0,2,1,4],[5,0,1,3],[10,0,1,3],[10,0,2,3,4],[3,0,3,4,2],[8,0,9,1,3,4,2,5,10,11,8],[90,0,1,2],[18,1],[1,0,9,8,12,13,2],[1,0,6,9,8,12,11,13,2],[36,0,1,2,3,4,5,6,1],[39,0,1,2,3,4],[14,0,1,4,3],[42,0,1,2,1],[43,0,1,2,3,1],[44,0,1,2,1],[45,0,1,2,3,4,5,5],[46,1],[47,0,1,2,3,4,1],[48,0,1,1],[25,0,1,2,3,4],[1,0,3,1,6,9,7,10,4],[1,0,1,6,9,7,3],[4,0,3,8,4,6,7,2],[19,0,1,2,3,1],[21,0,1,2],[22,0,1,2,3,4,2],[24,1,2,3,4,1],[8,0,1,2,10,12,11,4],[9,0,1,6,3],[26,0,3,4,1,2,2],[86,0,1,1],[1,0,6,9,8,10,12,11,13,2],[1,0,6,7,8,10,12,13,2],[1,0,2,6,9,3],[1,0,3,1,6,9,7,8,4],[1,0,1,6,9,7,8,11,3],[1,0,6,9,7,8,2],[16,0,4,1,5,2,3,7,8,7],[3,1,0,3,5,4,3],[7,0,1,2,4,6,7,3,3],[7,0,1,2,3,3],[7,2,4,3,1],[69,0,1,2,2],[70,0,1,1],[76,0,1,2,2],[79,0,1,1],[26,0,1,2,2],[80,0,1,2,3,4,5,6,7,8,6],[1,0,1,9,7,8,3],[1,0,1,6,9,7,8,10,3],[1,0,1,6,7,8,3],[1,0,9,8,10,12,13,2],[1,0,6,7,8,2],[1,0,2,9,3],[1,0,1,2,9,7,10,4],[1,0,1,9,7,3],[1,0,2,6,3],[1,0,3,1,6,9,7,10,11,4],[1,0,1,9,7,10,11,3],[1,0,3,1,6,7,10,4],[1,0,2],[1,0,2,6,7,10,12,13,3],[1,0,2,6,7,3],[1,0,1,6,8,3],[1,0,6,9,8,11,2],[1,0,1,9,7,8,11,3],[1,0,9,8,10,11,2],[1,0,1,6,9,7,8,3],[4,0,3,8,4,5,6,7,2],[4,1,3,4,10,2],[4,0,2,3,8,5,6,7,3],[4,0,3,8,5,2],[31,0,1,2,3,2],[32,0,1,2,3,4,5,3],[33,0,1,2,3,4,5,3],[19,0,1,2,1],[12,0,4,2],[12,0,1,2,3,3],[12,0,2,3,4,2],[14,2,3,0,1,4,5],[20,0,1,2,3,4,5,2],[40,0,1,2,3,4,2],[41,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[15,0,2,3,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,5],[15,0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,3],[15,5,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,4],[13,1,1],[13,0,4,2],[5,0,4,5,3],[21,1,1],[16,0,1,2,3,7,8,5],[16,0,6,4,1,5,2,3,7,8,8],[22,1,2,3,4,1],[23,0,2,2],[10,0,1,2,4],[10,0,3,3],[24,0,1,2,3,4,2],[3,0,3,5,4,2],[3,1,0,2,3,5,4,4],[3,1,0,3,5,3],[7,0,1,2,5,6,7,3,3],[7,0,1,2,5,4,3,3],[8,0,1,6,7,2,10,12,11,6],[8,0,1,3,4,2,10,12,11,6],[49,0,2],[50,0,1,1],[9,0,2,3,4,1,6,6],[9,0,2,1,6,4],[9,0,3,1,5,6,5],[9,0,6,2],[9,0,2,4,6,4],[51,0,1,1],[52,0,1,1],[53,0,1,1],[54,0,1],[55,0,1,2,3,1],[56,0,1,2,3,1],[57,0,1],[58,0,1,1],[59,0,1],[60,0,1,2,1],[61,0,1,2,3,1],[62,0,1,2,3,2],[63,0,1,2,3,4,1],[64,0,1,2,3,4,5,3],[65,0,1,2],[66,0,1,2,3,3],[67,0,1,2,3,4],[68,1],[11,0,1,3,2,3],[11,0,1,3,4,2,3],[11,0,4,2,2],[81,0,1,2,3,4,5,6,5],[82,0,2],[27,0,1,4,2,3,7,6],[27,0,5,1,2,6,3,7,8,7],[83,0,1,1],[84,0,1,2,4],[85,0,1,2,3,4,1],[87,0,1,1],[28,1],[28,0,1,2],[29,0,2],[29,0,1,3],[88,0,1,2,1],[89,0,1,2,3,4,1],[91,0,1,2,3,4,3],[92,0,1,2,4]],[[[{"name":"ui","spriteFrames":["SmokeSpawn","03Fa03AkJMNorXeg3JdFoc@e23e0","bg_black","03Fa03AkJMNorXeg3JdFoc@96692","boxUpLight01","03Fa03AkJMNorXeg3JdFoc@b9c54","btn_add","03Fa03AkJMNorXeg3JdFoc@bacc3","btn_background","03Fa03AkJMNorXeg3JdFoc@7616d","btn_background_round","03Fa03AkJMNorXeg3JdFoc@7209d","button_remove","03Fa03AkJMNorXeg3JdFoc@cdaef","fertilizer_00","03Fa03AkJMNorXeg3JdFoc@187ff","fertilizer_01","03Fa03AkJMNorXeg3JdFoc@a950b","ico_animal_0","03Fa03AkJMNorXeg3JdFoc@7ff24","ico_animal_1","03Fa03AkJMNorXeg3JdFoc@dcf0f","ico_animal_2","03Fa03AkJMNorXeg3JdFoc@5fd93","ico_animal_3","03Fa03AkJMNorXeg3JdFoc@9f07c","ico_arrow","03Fa03AkJMNorXeg3JdFoc@13abf","ico_currency_cash","03Fa03AkJMNorXeg3JdFoc@304ca","ico_currency_gold","03Fa03AkJMNorXeg3JdFoc@ed7ce","ico_currency_water","03Fa03AkJMNorXeg3JdFoc@50fd6","ico_event","03Fa03AkJMNorXeg3JdFoc@27a1c","ico_farm","03Fa03AkJMNorXeg3JdFoc@fc8e2","ico_lock","03Fa03AkJMNorXeg3JdFoc@ffb04","ico_market","03Fa03AkJMNorXeg3JdFoc@747a1","ico_plant_00","03Fa03AkJMNorXeg3JdFoc@98c7a","ico_plant_01","03Fa03AkJMNorXeg3JdFoc@ea618","ico_plant_02","03Fa03AkJMNorXeg3JdFoc@853f2","ico_plant_03","03Fa03AkJMNorXeg3JdFoc@2a200","ico_plant_04","03Fa03AkJMNorXeg3JdFoc@159c1","ico_quest","03Fa03AkJMNorXeg3JdFoc@d025f","ico_quest_type_0","03Fa03AkJMNorXeg3JdFoc@45f1f","ico_quest_type_1","03Fa03AkJMNorXeg3JdFoc@7ac0d","ico_quest_type_2","03Fa03AkJMNorXeg3JdFoc@57010","ico_setting","03Fa03AkJMNorXeg3JdFoc@74ac4","ico_shop","03Fa03AkJMNorXeg3JdFoc@06851","ico_storage","03Fa03AkJMNorXeg3JdFoc@d10ad","ico_upgrade","03Fa03AkJMNorXeg3JdFoc@a4bfa","ico_warning","03Fa03AkJMNorXeg3JdFoc@1e83d","ico_x","03Fa03AkJMNorXeg3JdFoc@d26bd","ico_zoo","03Fa03AkJMNorXeg3JdFoc@52c89","img_block","03Fa03AkJMNorXeg3JdFoc@2aec9","plant_00","03Fa03AkJMNorXeg3JdFoc@97239","plant_01","03Fa03AkJMNorXeg3JdFoc@72565","plant_02","03Fa03AkJMNorXeg3JdFoc@63d49","plant_03","03Fa03AkJMNorXeg3JdFoc@8ca3a","plant_04","03Fa03AkJMNorXeg3JdFoc@0a9ff","plant_task_0","03Fa03AkJMNorXeg3JdFoc@f1bbe","plant_task_1","03Fa03AkJMNorXeg3JdFoc@9c717","popup_bg_0","03Fa03AkJMNorXeg3JdFoc@7254a","popup_bg_1","03Fa03AkJMNorXeg3JdFoc@bc29b","ranch_activity_food","03Fa03AkJMNorXeg3JdFoc@4f450","ranch_activity_pet","03Fa03AkJMNorXeg3JdFoc@9abc5","ranch_activity_shower","03Fa03AkJMNorXeg3JdFoc@24824","shop_item_bg","03Fa03AkJMNorXeg3JdFoc@84691","storage_item_bg","03Fa03AkJMNorXeg3JdFoc@7d705","tab_ico_0","03Fa03AkJMNorXeg3JdFoc@ea6d0","tab_ico_1","03Fa03AkJMNorXeg3JdFoc@c622f","tab_ico_2","03Fa03AkJMNorXeg3JdFoc@c45ee","tab_normal","03Fa03AkJMNorXeg3JdFoc@1b909","tab_selected","03Fa03AkJMNorXeg3JdFoc@a9b73","tool_harvest","03Fa03AkJMNorXeg3JdFoc@37dd9","tool_pesticides","03Fa03AkJMNorXeg3JdFoc@523e6","tool_water","03Fa03AkJMNorXeg3JdFoc@2d3a9"]}],[30],0,[],[],[]],[[{"name":"ico_shop","rect":{"x":1067,"y":926,"width":84,"height":76},"offset":{"x":0,"y":1},"originalSize":{"width":90,"height":90},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_04","rect":{"x":496,"y":696,"width":150,"height":132},"offset":{"x":0,"y":-2},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_arrow","rect":{"x":632,"y":957,"width":42,"height":46},"offset":{"x":0,"y":0},"originalSize":{"width":42,"height":46},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_plant_04","rect":{"x":1137,"y":402,"width":86,"height":96},"offset":{"x":0,"y":1},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"fertilizer_00","rect":{"x":370,"y":863,"width":124,"height":132},"offset":{"x":0,"y":-2},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tab_normal","rect":{"x":375,"y":701,"width":160,"height":119},"offset":{"x":9,"y":0},"originalSize":{"width":178,"height":127},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_warning","rect":{"x":1,"y":954,"width":30,"height":86},"offset":{"x":-1,"y":0},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ranch_activity_shower","rect":{"x":475,"y":550,"width":144,"height":144},"offset":{"x":0,"y":0},"originalSize":{"width":144,"height":144},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_event","rect":{"x":717,"y":204,"width":134,"height":164},"offset":{"x":0,"y":0},"originalSize":{"width":134,"height":164},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_plant_03","rect":{"x":999,"y":746,"width":78,"height":106},"offset":{"x":0,"y":1},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"img_block","rect":{"x":503,"y":1,"width":335,"height":201},"offset":{"x":0,"y":0},"originalSize":{"width":335,"height":201},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tool_water","rect":{"x":1143,"y":285,"width":114,"height":144},"offset":{"x":-1,"y":1},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_currency_cash","rect":{"x":1001,"y":922,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tool_harvest","rect":{"x":853,"y":160,"width":142,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_quest_type_0","rect":{"x":840,"y":913,"width":90,"height":73},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":73},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ranch_activity_food","rect":{"x":991,"y":516,"width":124,"height":130},"offset":{"x":0,"y":0},"originalSize":{"width":124,"height":130},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_currency_water","rect":{"x":796,"y":484,"width":54,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tool_pesticides","rect":{"x":997,"y":402,"width":112,"height":138},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_zoo","rect":{"x":632,"y":825,"width":128,"height":130},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_quest_type_2","rect":{"x":1225,"y":401,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_animal_2","rect":{"x":496,"y":848,"width":134,"height":146},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_02","rect":{"x":218,"y":860,"width":150,"height":128},"offset":{"x":0,"y":-1},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"btn_background_round","rect":{"x":503,"y":204,"width":212,"height":212},"offset":{"x":-1,"y":1},"originalSize":{"width":214,"height":214},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"popup_bg_0","rect":{"x":1111,"y":724,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[36,35,35,35],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_01","rect":{"x":997,"y":276,"width":144,"height":124},"offset":{"x":0,"y":-2},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_market","rect":{"x":753,"y":595,"width":94,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":94,"height":98},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_setting","rect":{"x":1225,"y":675,"width":90,"height":84},"offset":{"x":0,"y":1},"originalSize":{"width":90,"height":90},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"btn_background","rect":{"x":840,"y":1,"width":155,"height":157},"offset":{"x":0,"y":-2},"originalSize":{"width":161,"height":161},"rotated":false,"capInsets":[24,24,23,30],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_quest_type_1","rect":{"x":1078,"y":826,"width":98,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":98,"height":98},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"storage_item_bg","rect":{"x":218,"y":701,"width":155,"height":157},"offset":{"x":0,"y":-2},"originalSize":{"width":161,"height":161},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_animal_0","rect":{"x":1147,"y":153,"width":150,"height":130},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"shop_item_bg","rect":{"x":1,"y":701,"width":215,"height":251},"offset":{"x":0,"y":-2},"originalSize":{"width":221,"height":255},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_plant_02","rect":{"x":972,"y":826,"width":94,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_03","rect":{"x":503,"y":418,"width":150,"height":130},"offset":{"x":0,"y":-1},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"bg_black","rect":{"x":1123,"y":622,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[36,38,37,38],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_00","rect":{"x":717,"y":370,"width":134,"height":112},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_plant_00","rect":{"x":621,"y":595,"width":130,"height":94},"offset":{"x":-1,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ranch_activity_pet","rect":{"x":853,"y":564,"width":125,"height":125},"offset":{"x":0,"y":0},"originalSize":{"width":125,"height":125},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_task_1","rect":{"x":870,"y":811,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_animal_3","rect":{"x":1175,"y":1,"width":138,"height":150},"offset":{"x":-1,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_upgrade","rect":{"x":655,"y":484,"width":109,"height":139},"offset":{"x":0,"y":0},"originalSize":{"width":109,"height":139},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"fertilizer_01","rect":{"x":853,"y":312,"width":134,"height":142},"offset":{"x":-1,"y":1},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tab_selected","rect":{"x":997,"y":1,"width":176,"height":123},"offset":{"x":1,"y":-2},"originalSize":{"width":178,"height":127},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"boxUpLight01","rect":{"x":1,"y":487,"width":472,"height":212},"offset":{"x":-3,"y":-8},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"btn_add","rect":{"x":1123,"y":516,"width":100,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":104},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"popup_bg_1","rect":{"x":1213,"y":767,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[33,35,32,34],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tab_ico_2","rect":{"x":915,"y":922,"width":80,"height":84},"offset":{"x":-1,"y":0},"originalSize":{"width":90,"height":90},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tab_ico_1","rect":{"x":762,"y":913,"width":90,"height":76},"offset":{"x":0,"y":1},"originalSize":{"width":90,"height":90},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"button_remove","rect":{"x":764,"y":811,"width":100,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":104},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_quest","rect":{"x":884,"y":691,"width":115,"height":113},"offset":{"x":0,"y":0},"originalSize":{"width":115,"height":113},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_storage","rect":{"x":764,"y":691,"width":118,"height":118},"offset":{"x":-1,"y":1},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_x","rect":{"x":1153,"y":926,"width":57,"height":57},"offset":{"x":0,"y":0},"originalSize":{"width":59,"height":59},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_animal_1","rect":{"x":997,"y":126,"width":148,"height":148},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"SmokeSpawn","rect":{"x":1,"y":1,"width":500,"height":484},"offset":{"x":0,"y":-14},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_plant_01","rect":{"x":999,"y":642,"width":110,"height":102},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"tab_ico_0","rect":{"x":1225,"y":491,"width":86,"height":88},"offset":{"x":-1,"y":1},"originalSize":{"width":90,"height":90},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_currency_gold","rect":{"x":655,"y":418,"width":60,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"plant_task_0","rect":{"x":1225,"y":579,"width":94,"height":86},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_farm","rect":{"x":630,"y":691,"width":132,"height":132},"offset":{"x":0,"y":1},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[{"name":"ico_lock","rect":{"x":853,"y":448,"width":114,"height":136},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[0]],[[[20,"animal_3"],[40,"animal_3",[-3,-4],[[82,-2,[2,"dbdQOqy55dwoOwtMHe8ywW"],[4,5,6,7,8,9],10]],[0,"039JBGvFlf8Z44LUb1mPts",-1,0]],[29,"Body",[-5,-6,-7,-8,-9,-10,-11],[0,"bcLgyteNNV27PUD91CDWt7",1,0],[1,0.0000537765008630231,0.023020822554826736,-0.00017354160081595182]],[66,"root",[-12,2,-13,-14,-15],[0,"e0XluJCDhf+6IpwatEjaAr",1,0],[3,0.7071068407911908,0,0,0.7071067215818992],[1,90.00000965934633,0,0]],[67,"Armature",1,[3],[0,"a43NXxtVFSUp0gXk9cnTTh",1,0],[3,-0.7071068407911909,0,0,0.7071067215818991],[1,100,100,100],[1,-90.00000965934633,0,0]],[12,"FrontFoot.R",3,[[11,"FrontFoot.R_end",-16,[0,"00q6WQILVfkI0nk97R1yJg",1,0],[1,-1.1102229998097382e-18,0.009999999776482582,1.3877787497621727e-19]]],[0,"26G2zfLaJV6p3pXLCbD9N1",1,0],[1,-0.009117710404098034,0.0010000348556786776,0.01927023008465767],[3,0.7071068407909181,-6.209646236899395e-7,-6.209645668465197e-7,0.7071067215816265],[1,90.00000965934633,3.87667620832701e-12,-0.0001006316202376715]],[8,"FrontLeg.R",2,[-17],[0,"7cvvge8h1eqYhfwRKBMoC8",1,0],[1,-0.0032468067947775126,0.008379977196455002,0.01873094029724598],[3,0.0012952884202324106,-0.0012955682826612425,0.7071055647628505,0.7071056243674941],[1,89.99867052826072,-89.99869320512238,89.79006673189204]],[8,"FrontUpLeg.R",6,[-18],[0,"fbw0dG7i5bDq3yrI7AmVDF",1,0],[1,2.4487718519594637e-9,0.006025583017617464,6.021457221727644e-10],[3,0.706853564541443,-0.7022758682440338,-0.04508993749057004,0.07164873142101912],[1,95.04363367817759,-75.48471135759631,-87.81611699616465]],[12,"FrontLowLeg.R",7,[[11,"FrontLowLeg.R_end",-19,[0,"17I0YOYJZe77jsuPq4wnew",1,0],[1,0,0.015877680853009224,2.2204459996194763e-18]]],[0,"ebM9V+OUNaqYSZ37r2WCA8",1,0],[1,8.19563861220729e-10,0.014804559759795666,7.450580430390374e-11],[3,0.1331460446931698,-0.018813656233402656,0.0025279523720033188,0.9909146212356041],[1,15.305631002608129,-2.175391787385122,0.000002412554620199633]],[8,"BackLeg.R",2,[-20],[0,"d31ezPuQBdoqALY0VA4m/o",1,0],[1,-0.0032468067947775126,0.008379977196455002,-0.021785270422697067],[3,0.0007835572993493648,-0.000784275465464433,0.7071063466516025,0.7071063466516025],[1,89.99997090402447,-90.00002909596121,89.87296088624299]],[8,"BackUpLeg.R",9,[-21],[0,"ee4UCnrSJe2b3ljjbrDZqe",1,0],[1,2.6392144025777498e-9,0.004695829935371876,2.844441349125759e-9],[3,-0.6711558061437017,0.6744514661419378,-0.20213857166258833,0.2319592669948692],[1,-65.8136082604064,78.42660923213249,-87.56878091632545]],[12,"BackLowLeg.R",10,[[11,"BackLowLeg.R_end",-22,[0,"1cPuoQCARYGKaLorOvmfjm",1,0],[1,0,0.021711884066462517,-4.440891999238953e-18]]],[0,"72stSJfeJXNJnpFcQSFCil",1,0],[1,-1.303851610012785e-10,0.010874390602111816,1.3783574281944766e-9],[3,-0.357463601726651,0.018072592270244717,0.0069187652060998615,0.9337265582263721],[1,-41.8972320491341,2.2176787497755472,-0.000006772635116469312]],[8,"FrontLeg.L",2,[-23],[0,"e50kmZqcRSjrv2uBCCZcVQ",1,0],[1,0.002630481729283929,0.008379977196455002,0.01873094029724598],[3,0.7071054153926467,0.7071054749972929,0.0013744056093762014,-0.0013746855882320113],[1,-89.99874639371293,-90.00123091999457,89.77724521028026]],[8,"FrontUpLeg.L",12,[-24],[0,"casBIDR31RNZxQF1bLWvwl",1,0],[1,-1.756112921746933e-9,0.006025584880262613,8.378248095297636e-10],[3,-0.02159131891643826,-0.0950879461007112,0.7079610872193227,0.6994878100703624],[1,91.83742545141908,-101.31553480725925,84.00249672666698]],[12,"FrontLowLeg.L",13,[[11,"FrontLowLeg.L_end",-25,[0,"7aeXYDUt1S+KXrJowprNxH",1,0],[1,0,0.015877680853009224,0]]],[0,"ddZDVMdZRXKpCgvszKorZ4",1,0],[1,5.21540644005114e-10,0.01480456069111824,-2.2351742678949904e-9],[3,0.13298889845622416,0.0518218384837552,-0.006963174712129553,0.9897373207783426],[1,15.30574958155501,5.994446392534305,0.0000017569448676354595]],[8,"BackLeg.L",2,[-26],[0,"77NLfLH8Rd3aKmeeYlgDTK",1,0],[1,0.002630481729283929,0.008379977196455002,-0.021785270422697067],[3,0.7071064108167839,0.7071065300260734,0.0006625798408461719,-0.000663298006965872],[1,0,180.10749206804024,90]],[8,"BackUpLeg.L",15,[-27],[0,"7e6BEk3+xcALhXps3XrGs0",1,0],[1,-1.7321695189309594e-9,0.004695831332355738,-5.743572839556066e-10],[3,0.20885529998403182,0.2254200118205795,0.6690967641935,0.6766644678754589],[1,-47.56156043426251,83.33119945023036,88.52430684541918]],[12,"BackLowLeg.L",16,[[11,"BackLowLeg.L_end",-28,[0,"03SpKvjMFb9olohS05c34L",1,0],[1,1.1102229998097382e-18,0.021711884066462517,0]]],[0,"90gs4K5rJe1r7sikxkoc+t",1,0],[1,1.3876706450588472e-9,0.010874389670789242,-2.9802322831784522e-9],[3,-0.3575146799690923,-0.008874606354457956,-0.003397634490841542,0.9338591708863375],[1,-41.897265414717886,-1.0889531390263516,-0.000012614001200186714]],[8,"Back",2,[-29],[0,"11H5cWjxhWw5fTzgwXOMxf",1,0],[1,-0.0003228271089028567,0.014074056409299374,-0.02402278035879135],[3,0.600521340713622,-0.03759600686347977,0.041032479214218334,0.797669728186403],[1,74.01189985905324,-6.273967195598808,1.1635466469197921]],[90,"Tail1",18,[-30],[0,"b1UV7XyElbs7MhIYNWkFVw",1,0],[1,0.00011168546916451305,0.0004445876111276448,-0.011115172877907753],[3,0.9926701262968977,2.6012603822892967e-8,2.4599262545988356e-7,-0.12085536958546711],[1,0.9999999403953552,1,1.0000046491622925],[1,-166.11705810797116,-0.000028342307693480152,-4.4777739656929585e-7]],[8,"Tail2",19,[-31],[0,"39GWKMQNJQJrBNwEAUfE8a",1,0],[1,2.2351741291171123e-10,0.008375221863389015,2.7951319037100575e-9],[3,-0.6165577197016351,9.049319550859618e-8,-7.07902219576156e-8,0.7873097092480869],[1,-76.13038874521422,0.000003162717130410351,-0.000012780179695139314]],[8,"Tail3",20,[-32],[0,"60zaADwUxW+riJAAxxPzQ5",1,0],[1,7.450580430390374e-11,0.008778817020356655,2.7101487720671003e-9],[3,-8.469585136089024e-9,0.9891947031850706,-0.14660777329493307,3.1860077274446467e-7],[1,16.860785764413208,179.99996402782003,-0.0000063125531820381505]],[12,"Tail4",21,[[11,"Tail4_end",-33,[0,"840iCwDEBf/7pY+rBYfctR",1,0],[1,2.7755574995243454e-19,0.01026824489235878,8.881783998477905e-18]]],[0,"c1ZDfAPalWS4xOAIvKOQq7",1,0],[1,3.7252903539730653e-10,0.006993296090513468,-1.0337680711458574e-9],[3,0.0390400249736085,3.436872089418752e-8,1.558242765283034e-8,0.9992376476344648],[1,4.474794507341863,0.000003865652445262186,0.0000019380072905949817]],[8,"Shoulders",2,[-34],[0,"e2ufLKktpWS4RregBsd5Nt",1,0],[1,-0.0007365465280599892,0.01807716116309166,0.01851993054151535],[3,0.008421451052746927,0.9597338069228858,0.2794420189265245,-0.02742730518551501],[1,-32.46892103661168,-176.71214203094826,0.04790039382298016]],[8,"Neck",23,[-35],[0,"8dc9HrWK5ccYXlIRQ5DFtN",1,0],[1,5.122274132629556e-11,0.013137188740074635,2.712476909749739e-10],[3,-0.0886846790567607,-0.022488868112285784,-0.017817650187023866,0.9956464281327185],[1,-10.223395129333626,-2.7493052912714067,-1.804618282098218]],[12,"Head",24,[[11,"Head_end",-36,[0,"32Fx0Bzz9Rj6qRK90xRrEa",1,0],[1,0,0.01775381900370121,1.776356799695581e-17]]],[0,"27g6JlW05VYJwy9fRAjp8z",1,0],[1,-2.39742808938459e-11,0.013573313131928444,3.3753928541102596e-9],[3,-0.6245374799606817,-0.19781437896428433,0.16660769604005599,0.7369289539837338],[1,-79.11122360848766,-5.502426603138088,29.51431895269537]],[8,"Hips",2,[-37],[0,"99pbKh6NpVja7rVyg0m0OU",1,0],[1,-0.0003228271089028567,0.016898196190595627,-0.014742005616426468],[3,0.000003487624764492713,0.6944211092559098,0.719568845209615,0.0000033658895813566903],[1,-92.03778993215424,-179.99998026259544,0.0005550665619484873]],[12,"Torso",26,[[11,"Torso_end",-38,[0,"b2Qye8OedX7YlFRWtTpkFW",1,0],[1,-6.938893748810864e-20,0.015270233154296875,0]]],[0,"d9UpW1h/xQRqg/GNOeN6xV",1,0],[1,2.1590436036222904e-11,0.014671733602881432,5.460347729524528e-10],[3,0.05375247793241081,0.0007617085899636836,-0.013526975106839246,0.9984623737831129],[1,6.165413201806021,0.1705337539528226,-1.5431884931505082]],[12,"BackFoot.R",3,[[11,"BackFoot.R_end",-39,[0,"46b6Gy3bFZIoQCziI47pmN",1,0],[1,0,0.006745369639247656,1.3877787497621727e-19]]],[0,"c8Mk7eSqhZMYRuukz9UwVY",1,0],[1,-0.008358624763786793,0.0010000348556786776,-0.026047201827168465],[3,0.7071068407909181,-6.209646236899395e-7,-6.209645668465197e-7,0.7071067215816265],[1,90.00000965934633,3.87667620832701e-12,-0.0001006316202376715]],[12,"FrontFoot.L",3,[[11,"FrontFoot.L_end",-40,[0,"eavUya1TxR3ICTc3/asXqx",1,0],[1,0,0.009999999776482582,1.3877787497621727e-19]]],[0,"07fN7vxPxXZYV+wAVDRws/",1,0],[1,0.008608940057456493,0.0010000348556786776,0.01927023008465767],[3,0.7071068407905415,-9.581394970415802e-7,-9.581393833547404e-7,0.70710672158125],[1,90.0000096593463,3.876676966638594e-12,-0.00015527314280957484]],[12,"BackFoot.L",3,[[11,"BackFoot.L_end",-41,[0,"33dt0ZamNRZJVf3cGHIpS/",1,0],[1,0,0.006745369639247656,2.7755574995243454e-19]]],[0,"d50PXwDJtRPKN7NDmUhqx+",1,0],[1,0.007849856279790401,0.0010000348556786776,-0.026047201827168465],[3,0.7071068407905415,-9.581394970415802e-7,-9.581393833547404e-7,0.70710672158125],[1,90.0000096593463,3.876676966638594e-12,-0.00015527314280957484]],[43,"Zebra",1,[[68,-42,[2,"98zNhp6XVRVqmvEikJRbcj"],[0,1],[14],1,2,3]],[0,"fae0lS5htShrNhw9tQV132",1,0],[3,-0.7071068407911909,0,0,0.7071067215818991],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,2,1,0,0,1,0,-1,4,0,-2,31,0,-1,6,0,-2,9,0,-3,12,0,-4,15,0,-5,18,0,-6,23,0,-7,26,0,-1,5,0,-3,28,0,-4,29,0,-5,30,0,4,5,0,-1,7,0,-1,8,0,4,8,0,-1,10,0,-1,11,0,4,11,0,-1,13,0,-1,14,0,4,14,0,-1,16,0,-1,17,0,4,17,0,-1,19,0,-1,20,0,-1,21,0,-1,22,0,4,22,0,-1,24,0,-1,25,0,4,25,0,-1,27,0,4,27,0,4,28,0,4,29,0,4,30,0,0,31,0,9,1,2,4,3,3,4,4,42],[0,0,0,0,0,0,0,0,0,0,0],[-1,-2,6,16,-1,-2,-3,-4,-5,-6,14],[55,56,57,58,30,59,60,61,62,63,30]],[[[23,".bin",1440442756,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22752,"length":1896,"count":474,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22752,"count":474,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6307587623596191,-0.008967475965619087,-0.7826605439186096],"maxPosition",8,[1,0.6515856385231018,0.6590640544891357,0.5341161489486694]]],-1],0,0,[],[],[]],[[[23,".bin",1045714555,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":82176,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":82176,"count":1712,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7575214505195618,-0.00511114951223135,-0.4603376090526581],"maxPosition",8,[1,0.7605418562889099,2.1895108222961426,0.6400851607322693]]],-1],0,0,[],[],[]],[[[69,"Skin-0",1727875492,["Armature/root","Armature/root/FrontFoot.R","Armature/root/Body","Armature/root/Body/FrontLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R/FrontLowLeg.R","Armature/root/Body/BackLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R/BackLowLeg.R","Armature/root/Body/FrontLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L/FrontLowLeg.L","Armature/root/Body/BackLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L/BackLowLeg.L","Armature/root/Body/Back","Armature/root/Body/Back/Tail1","Armature/root/Body/Back/Tail1/Tail2","Armature/root/Body/Back/Tail1/Tail2/Tail3","Armature/root/Body/Back/Tail1/Tail2/Tail3/Tail4","Armature/root/Body/Shoulders","Armature/root/Body/Shoulders/Neck","Armature/root/Body/Shoulders/Neck/Head","Armature/root/Body/Hips","Armature/root/Body/Hips/Torso","Armature/root/BackFoot.R","Armature/root/FrontFoot.L","Armature/root/BackFoot.L"],[[[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,0,0,0,1],[7,1,1.075455965353978e-22,-0.0000017563529581821058,0,-1.075455965353978e-22,-1,-1.2246468525851679e-16,0,-0.0000017563529581821058,1.2246468525851679e-16,-1,0,0.009117711335420609,-0.01927023008465767,0.0010000186739489436,1],[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,-0.0000537765008630231,-0.023020826280117035,0.00017354160081595182,1],[7,-7.943073146920651e-14,-1,-3.956771479352028e-7,0,1.9470718370939721e-7,3.956771479352028e-7,-1,0,1,-1.5647192200783644e-13,1.9470718370939721e-7,0,-0.03140079602599144,-0.0031930229160934687,-0.018557406961917877,1],[7,0.9992793202400208,7.817317992930839e-8,0.03795882686972618,0,-0.03744172304868698,-0.16449666023254395,0.985666811466217,0,0.006244175601750612,-0.9863777756690979,-0.1643780767917633,0,0.008321077562868595,0.027920423075556755,0.023802941665053368,1],[7,0.9999998807907104,8.070195889331444e-8,1.987690723126434e-7,0,-2.0585146387475106e-7,0.10014060884714127,0.994973361492157,0,6.039142164127043e-8,-0.9949736595153809,0.10014057904481888,0,0.009218607097864151,0.01881570555269718,0.019205018877983093,1],[7,1.1920848663748984e-7,-1.0000001192092896,-0.0000010154482197322068,0,1.9470715528768778e-7,0.0000010154482197322068,-1,0,1.0000001192092896,1.1920828768552383e-7,1.947072689745255e-7,0,-0.031400807201862335,-0.0031930566765367985,0.02195880562067032,1],[7,0.9992508888244629,3.1871863370724896e-8,-0.03869609907269478,0,0.03139324113726616,0.584661602973938,0.8106695413589478,0,0.022624149918556213,-0.8112770915031433,0.584223747253418,0,0.006483175326138735,0.012636274099349976,-0.036451708525419235,1],[7,1,9.931482480851628e-8,1.284574153714857e-7,0,-1.1668206667536651e-7,-0.11062692850828171,0.9938617944717407,0,1.1291607648900026e-7,-0.9938619136810303,-0.11062690615653992,0,0.007888861000537872,0.025572653859853745,-0.02564503811299801,1],[7,-6.477578754415445e-14,1,-3.956770342483651e-7,0,-2.3215589806113712e-7,3.956770342483651e-7,1,0,1,1.566345387811821e-13,2.3215589806113712e-7,0,-0.03140080347657204,-0.002684251172468066,0.018557392060756683,1],[7,0.9945321083068848,4.430908617791829e-8,-0.10443182289600372,0,0.10300923138856888,-0.16449664533138275,0.9809842109680176,0,-0.017178641632199287,-0.9863777160644531,-0.16359718143939972,0,-0.006211212836205959,0.027920419350266457,0.0242511797696352,1],[7,1,7.040221561283033e-8,2.3092101741895021e-7,0,-2.368103366734431e-7,0.10014048963785172,0.994973361492157,0,4.6923773311391415e-8,-0.9949734210968018,0.10014048218727112,0,-0.00870984885841608,0.01881568878889084,0.019205018877983093,1],[7,-9.405196890396872e-13,1,-0.0000010154477649848559,0,-8.922222605178831e-8,0.0000010154477649848559,1,0,1,1.0311201762217004e-12,8.922222605178831e-8,0,-0.03140079602599144,-0.0026842805091291666,-0.021958813071250916,1],[7,0.9998193979263306,-2.6094554073097243e-8,0.01900486648082733,0,-0.01541819702833891,0.5846618413925171,0.8111305236816406,0,-0.011111441068351269,-0.8112771511077881,0.5845562219619751,0,-0.006691282149404287,0.012636265717446804,-0.036307260394096375,1],[7,1,3.1782598775009774e-9,2.6798463181876286e-7,0,-2.6598817726153356e-7,-0.11062703281641006,0.9938620328903198,0,3.280509730529957e-8,-0.9938620924949646,-0.11062702536582947,0,-0.0073800827376544476,0.025572657585144043,-0.025645041838288307,1],[7,1,1.3010425425610684e-22,4.76837158203125e-7,0,1.3881683003091894e-7,-0.9566864967346191,-0.2911199927330017,0,4.56183670394239e-7,0.2911199927330017,-0.9566864967346191,0,0.00026903030811809003,0.012349234893918037,0.04253220558166504,1],[7,1,1.2409302752036666e-10,4.582857964646747e-12,0,-1.2416137562532015e-10,0.9985907673835754,0.053069405257701874,0,2.009153694110255e-12,-0.05306966230273247,0.9985859990119934,0,0.00015737058129161596,-0.024428974837064743,-0.04922361299395561,1],[7,1,-2.3420737571555605e-10,2.3842022756070946e-7,0,-2.3413187477672182e-7,0.18785133957862854,0.9821969270706177,0,-4.501780992427484e-8,-0.9821930527687073,0.18785202503204346,0,0.00015738098591100425,0.039924945682287216,-0.04364730417728424,1],[7,-1,7.035073912309286e-11,3.8943693425608217e-7,0,-3.8728725826331356e-7,-0.10510523617267609,-0.9944610595703125,0,4.0862090600057854e-8,-0.9944562911987305,0.10510572791099548,0,-0.00015735780471004546,0.042466901242733,0.03273717686533928,1],[7,-1,5.799694946517775e-8,3.1960988167156756e-7,0,-3.2482691381119366e-7,-0.18237243592739105,-0.9832294583320618,0,1.263730675660213e-9,-0.983224630355835,0.18237334489822388,0,-0.00015735880879219621,0.03791962191462517,0.029869725927710533,1],[7,-0.9983536601066589,0.03149224445223808,-0.04793712869286537,0,-0.05735006928443909,-0.5359179973602295,0.8423197865486145,0,0.0008361703949049115,0.8436827659606934,0.536841630935669,0,-0.0017681776080280542,-0.044484321027994156,-0.00664231413975358,1],[7,-1.0000001192092896,1.0994877008840831e-8,0.000005181227152206702,0,0.000003803521849476965,-0.6774875521659851,0.7355341911315918,0,0.0000035183045383746503,0.7355343699455261,0.6774874925613403,0,-0.0002691377012524754,-0.055580634623765945,-0.016679488122463226,1],[7,-0.8662223815917969,-0.0015339370584115386,0.4996565282344818,0,-0.27237826585769653,-0.8368988037109375,-0.4747740626335144,0,0.41889023780822754,-0.5473552942276001,0.7245228886604309,0,-0.035693008452653885,0.005083934403955936,-0.06132461130619049,1],[7,-1,2.092813905030591e-13,0.000009687739293440245,0,-3.4448314067958563e-7,-0.9993674159049988,-0.03555864840745926,0,0.000009681612027634401,-0.03555864840745926,0.9993675351142883,0,-0.00026943194097839296,0.016325578093528748,-0.03936338797211647,1],[7,-0.9996330142021179,-0.02709319442510605,-0.00005722550122300163,0,0.02701888047158718,-0.9970430135726929,0.07193925976753235,0,-0.0020061202812939882,0.0719112902879715,0.9974091053009033,0,-0.00019675440853461623,-0.0025880569592118263,-0.039313461631536484,1],[7,1,1.075455965353978e-22,-0.0000017563529581821058,0,-1.075455965353978e-22,-1,-1.2246468525851679e-16,0,-0.0000017563529581821058,1.2246468525851679e-16,-1,0,0.008358626626431942,0.026047201827168465,0.0010000200709328055,1],[7,1,1.6594129641253459e-22,-0.0000027100270472146804,0,-1.6594129641253459e-22,-1,-1.2246468525851679e-16,0,-0.0000027100270472146804,1.2246468525851679e-16,-1,0,-0.00860893726348877,-0.01927023008465767,0.001000058138743043,1],[7,1,1.6594129641253459e-22,-0.0000027100270472146804,0,-1.6594129641253459e-22,-1,-1.2246468525851679e-16,0,-0.0000027100270472146804,1.2246468525851679e-16,-1,0,-0.007849853485822678,0.026047201827168465,0.00100005604326725,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,".bin",3057132391,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":76416,"length":6984,"count":1746,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":184648,"length":9264,"count":2316,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":76416,"count":1194,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]},{"view":{"offset":83400,"length":101248,"count":1582,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-0.012848868034780025,-0.050709761679172516,-0.00044154166243970394],"maxPosition",8,[1,0.012848868034780025,0.04164161533117294,0.07027643173933029]]],-1],0,0,[],[],[]],[[[70,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"emissiveScale":0,"shininessExponent":9.607843137254903,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4281348144],"emissive",8,[4,4281348144]],{},{}],11,0,0]]],0,0,[0],[11],[7]],[[[70,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"emissiveScale":0,"shininessExponent":9.607843137254903,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4293388263]],{},{}],11,0,0]]],0,0,[0],[11],[7]],[[[20,"Apple_2"],[29,"Apple_2",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[36,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,0,0,-0.002],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,150,150,150],[1,-90,0,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,64]],[[[20,"Tomato_3"],[29,"Tomato_3",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[37,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,0,-0.905,0],[1,4,4,4]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,65]],[[[20,"SmokeHouse"],[30,"SmokeHouse",[-2],[0,"5dKoQA71ZEp76xT0c5g+wz",-1,0]],[127,"smoke",1,[-3],[0,"57w04KJXFEVpYLGX3s3BIR",1,0],[1,0,-0.025,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[141,0,1,0,2,[2,"0b7a7v3FVOCpzmec7amMlB"],[[0,null],6,0],[145,[4,4292539132]],[58,3,1,3],[5],[5],[5],[5],[5],[59,3,3.141592653589793],[59,3,3],[25,3],[25,-0.1],[25,5],[5],[83,true,[57,2,[4,4294246377],[4,4290957525]]],[96,true,0,0.1,3,1,0.5235987755982988,[25,1],[1,3,3,3]],[84,true,[44,1,[45,2,[0,0.9769230769230769],[[60,2,0.9666666666666667],[53,2,0.08518518518518518,-1.52,-1.52]]]],[5],[5],[5]],[85,[5],[5],[5],[25,1]],[71,[5],[5],[5]],[72,[5],[5],[5],[5]],[73,[5],[5],[5]],[74,true,4,4,1,[44,1,[45,2,[0,1],[[61,2,1,1],[53,2,1,1,1]]]],[5]],[75],[76,[25,1],[5],[42],[42],-4],[77,1,2]]],0,[0,2,1,0,-1,2,0,-1,3,0,17,3,0,9,1,4],[0,0,0],[-1,18,19],[15,15,19]],[[[23,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[23,".bin",3902819324,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":212632,"length":17364,"count":4341,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":212632,"count":3797,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-6.501608371734619,-0.007862635888159275,-14.762481689453125],"maxPosition",8,[1,20.59972381591797,18.1842098236084,2.870004177093506]]],-1],0,0,[],[],[]],[[[23,".bin",4270259168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9552,"length":2280,"count":570,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9552,"count":199,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00580332987010479,-0.006315536797046661,-0.000015151877960306592],"maxPosition",8,[1,0.005555775016546249,0.00439565721899271,0.01921602338552475]]],-1],0,0,[],[],[]],[[[23,".bin",983582438,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":55440,"length":5100,"count":1275,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":55440,"count":1155,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5578544735908508,-0.9161739349365234,-0.77680903673172],"maxPosition",8,[1,0.8044098019599915,4.436491012573242,0.4250032305717468]]],-1],0,0,[],[],[]],[[[23,".bin",2283059524,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21600,"length":1800,"count":450,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21600,"count":450,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4881349205970764,0.011362048797309399,-0.2633524537086487],"maxPosition",8,[1,0.622733473777771,0.6778225898742676,0.7178273797035217]]],-1],0,0,[],[],[]],[[[20,"QuestItem"],[107,"QuestItem",33554432,[-3,-4,-5,-6,-7,-8,-9],[[39,-2,[2,"51OVnE0mVEvYQObkO4lkzi"]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[108,"ButtonClaim",33554432,1,[-14],[[32,-10,[2,"4cn94betlBhIOcrStXk68U"],[5,250,100]],[97,1,0,-11,[2,"8aD452Fo1HpKl7loTzvysR"],7],[159,3,1.1,-13,[2,"96ILTalaBEJ7vl7fXbEHrB"],[4,4292269782],-12,8]],[0,"56W9s+FCFGrrPlnNqAfPzl",1,0],[1,1055,-60,0]],[109,"background",33554432,1,[[50,-15,[2,"2b3NnxIjtDLo/9k5lqHanz"],[5,1200,120],[0,0,1]],[97,1,0,-16,[2,"b9QA5DRcxJt6RHOQTADrfZ"],0]],[0,"7czV+94W5F4pzxsrKb4t9g",1,0]],[55,"Icon",33554432,1,[[39,-17,[2,"5cpPESW4VJqagTnlTz10x9"]],[156,0,-18,[2,"8f2Bx0YMtHN6F7WpqXtj62"],1]],[0,"2dF7hgdHxK6bFx5thD2ZoT",1,0],[1,69.444,-58.983,0],[1,0.8,0.8,1]],[56,"LabelDescription",33554432,1,[[50,-19,[2,"2fPAQYN5RMCr5fR6537P+4"],[5,353.89,40],[0,0,0.5]],[86,"Plant a tree or seed",40,false,-20,[2,"301gxRIOBDp62K9+XXRS51"],2]],[0,"bd3Jt41qlHvaeAdQBAM7Pe",1,0],[1,131.12,-56,0]],[56,"LabelReward",33554432,1,[[50,-21,[2,"a2QpgeFSNDQ4eIaAk9KRTr"],[5,73.89,40],[0,1,0.5]],[86,"500",40,false,-22,[2,"32q5gCAolAA4R+/lPBgoPY"],3]],[0,"3abpREj39DErHDKYBlPoIk",1,0],[1,793.262,-56,0]],[55,"IconCurrency",33554432,1,[[32,-23,[2,"9fexwpghpCTZGmMIQl9MCL"],[5,60,64]],[34,-24,[2,"36SNSY1f5OV4enQCwJcviJ"],4]],[0,"80n0zkNZpIaK1BljhZz5yo",1,0],[1,826.512,-57.447,0],[1,0.8,0.8,1]],[56,"LabelProgress",33554432,1,[[50,-25,[2,"31pDSBiPdEaILNDIbFnmla"],[5,67.78,40],[0,1,0.5]],[86,"1/10",40,false,-26,[2,"a580DaehhJ14YwL/FGRB1X"],5]],[0,"269ceUoglPx40j/ZS8Mb2V",1,0],[1,1055,-56,0]],[56,"Label",33554432,2,[[32,-27,[2,"dfDbObF/pNtbL44Sxey2xK"],[5,100,40]],[161,"Claim",40,1,false,false,-28,[2,"28zMIs9ZpK24OY3YtJ8VDC"],6]],[0,"60T8TgNe1N8rbpI2UXWmvA",1,0],[1,0,3.529,0]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,2,0,0,2,0,0,2,0,21,2,0,0,2,0,-1,9,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,9,1,28],[0,0,0,0,0,0,0,0,0],[1,1,8,8,1,8,8,1,7],[11,66,1,1,31,1,1,4,4]],[[{"name":"default_progressbar","rect":{"x":0,"y":0,"width":30,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-15,-7.5,0,15,-7.5,0,-15,7.5,0,15,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,30,15,0,0,30,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15,"y":-7.5,"z":0},"maxPos":{"x":15,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[67]],[[[23,".bin",2723892759,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44744,"length":5076,"count":1269,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":44744,"count":799,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-6.926687240600586,-8.290106773376465,-8.290106773376465],"maxPosition",8,[1,9.071044921875,8.290106773376465,8.290106773376465]]],-1],0,0,[],[],[]],[[[23,".bin",1955488527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224336,"length":18228,"count":4557,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224336,"count":4006,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-12.112174987792969,-0.007862542755901814,-7.520937919616699],"maxPosition",8,[1,9.892732620239258,18.10137939453125,18.683460235595703]]],-1],0,0,[],[],[]],[[[65],[30,"WaterWheel",[-2],[0,"27mzaN23VR478JJDBj4b/o",-1,0]],[8,"WaterWheel",1,[-3,-4],[0,"c9E10DwfZfGr9iiyNV2Q3b",1,0],[1,-11.939798355102539,0.043095625936985016,-35.962677001953125],[3,0.7071068109888685,0,0,0.7071067513842252],[1,90.00000482967297,0,0]],[36,"House",2,[[17,-5,[2,"c2dMW41uRXa4Je62YT7TtT"],[0],[14],1]],[0,"2dFZSF3XFTtaZs0eguzDvn",1,0],[1,-2.280874729156494,-0.4368973672389984,-0.0030959350988268852],[3,-0.5000000074505778,0.5000000670552235,-0.5000000074505778,0.4999999180436093],[1,0.3937009871006012,0.3937009871006012,0.3937009871006012],[1,0,90.00001024528467,-90]],[36,"Wheel",2,[[17,-6,[2,"78y6shdSFbrqfdRih7IyLX"],[2],[14],3]],[0,"f52A77uAhafL+n37f8pJ9h",1,0],[1,2.5148324966430664,-0.4368911683559418,-2.689953565597534],[3,-2.2197246021453134e-7,0.7071068407911687,-0.707106721581877,-1.1520233497803665e-7],[1,0.3937009871006012,0.3937009871006012,0.3937009871006012],[1,89.99999034065574,-179.99997267924348,-0.000008651422027537246]]],0,[0,2,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,9,1,6],[0,0,0,0],[-1,6,-1,6],[32,68,32,69]],[[[38,"Village_Autumn",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.0717734098434448,"emissiveScale":0},"mainColor",8,[4,4293914607],"specularColor",8,[4,4278190080],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[15,11],[70,7]],[[[20,"HouseA"],[110,"HouseA",[-2],[0,"206WFyActfFYab8VYGP3ll",-1,0],[1,49.28,0.608,-18.741],[3,0,-0.9999961977677757,0,0.002757616723112648],[1,0,-179.684,0]],[111,"House01",1,[[140,[null],-3,[2,"049j7gnZVdm5F/bgr6/701"],[14],0]],[0,"53DFtdNilehYcEyqcOV2cC",1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0],[6],[71]],[[[69,"Skin-0",838716580,["Armature/root","Armature/root/FrontFoot.R","Armature/root/Body","Armature/root/Body/FrontLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R/FrontLowLeg.R","Armature/root/Body/BackLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R/BackLowLeg.R","Armature/root/Body/FrontLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L/FrontLowLeg.L","Armature/root/Body/BackLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L/BackLowLeg.L","Armature/root/Body/Back","Armature/root/Body/Shoulders","Armature/root/Body/Shoulders/Neck","Armature/root/Body/Shoulders/Neck/Head","Armature/root/Body/Hips","Armature/root/Body/Hips/Torso","Armature/root/BackFoot.R","Armature/root/FrontFoot.L","Armature/root/BackFoot.L"],[[[7,0.6545860767364502,1.4534733326815091e-16,-1.4534733326815091e-16,0,1.4534733326815091e-16,-0.6545860767364502,2.8612868518962387e-8,0,-1.4534733326815091e-16,-2.8612868518962387e-8,-0.6545860767364502,0,0,0,0,1],[7,0.6545860767364502,-1.453472538588121e-16,-0.0000013057496062174323,0,0.0000013057496062174323,2.8612868518962387e-8,0.6545860767364502,0,5.693078522711961e-14,-0.6545860767364502,2.8612868518962387e-8,0,0.009117711335420609,-0.011625418439507484,0.0010000165784731507,1],[7,0.6545860767364502,1.4534733326815091e-16,-1.4534733326815091e-16,0,1.4534733326815091e-16,-0.6545860767364502,2.8612868518962387e-8,0,-1.4534733326815091e-16,-2.8612868518962387e-8,-0.6545860767364502,0,-0.0000537765008630231,-0.023020826280117035,0.00017354160081595182,1],[7,-5.184890263985019e-14,-0.6545860767364502,-2.590047643025173e-7,0,-0.6545860767364502,9.09575352862034e-14,-9.883975593538707e-8,0,9.883975593538707e-8,2.590047643025173e-7,-0.6545860767364502,0,-0.023755986243486404,-0.003193025942891836,-0.010912593454122543,1],[7,0.6541142463684082,-3.841500628709582e-8,0.024847334250807762,0,-0.0049081165343523026,0.6416882276535034,0.12920880317687988,0,-0.024357758462429047,-0.12930196523666382,0.6412259340286255,0,0.008627776987850666,0.02113231085240841,0.015728982165455818,1],[7,0.6545859575271606,-6.379059414030053e-8,1.869221364358964e-7,0,9.064345363185566e-8,0.6474373936653137,-0.09647613763809204,0,-1.7547901620673656e-7,0.09647613763809204,0.6474373936653137,0,0.009218609891831875,0.01351012010127306,0.011482090689241886,1],[7,7.803221535596094e-8,-0.654586136341095,-6.646983479186019e-7,0,-0.654586136341095,-7.803210877455058e-8,-9.883981277880594e-8,0,9.883974172453236e-8,6.646984047620208e-7,-0.6545860767364502,0,-0.023755991831421852,-0.0031930459663271904,0.012262948788702488,1],[7,0.6540958285331726,-3.386928071336115e-8,-0.025329867377877235,0,-0.014809380285441875,0.5310505628585815,-0.38242489099502563,0,0.020549559965729713,0.3827114403247833,0.5306529402732849,0,0.0069605209864676,0.012103005312383175,-0.024125296622514725,1],[7,0.6545860767364502,8.0905614652238e-8,3.775164714170387e-8,0,-8.614277646756818e-8,0.6450719833374023,0.11119811981916428,0,-2.3459071130105258e-8,-0.11119812726974487,0.6450719237327576,0,0.007888859137892723,0.017880013212561607,-0.01581326127052307,1],[7,-4.225598007352033e-14,0.6545860767364502,-2.5900470745909843e-7,0,-0.6545860767364502,-1.1370690901433417e-13,-1.8057889406009053e-7,0,-1.8057889406009053e-7,2.5900470745909843e-7,0.6545860767364502,0,-0.023755989968776703,-0.0026842537336051464,0.010912584140896797,1],[7,0.651006817817688,-4.206251347227408e-8,-0.0683596208691597,0,0.01350327953696251,0.641688346862793,0.12859492003917694,0,0.06701269000768661,-0.12930195033550262,0.6381796598434448,0,-0.007054996211081743,0.021132322028279305,0.016215577721595764,1],[7,0.6545860171318054,-4.6941035947156706e-8,1.6639584998756618e-7,0,7.095266596479632e-8,0.6474375128746033,-0.09647621959447861,0,-1.5766026706387493e-7,0.0964762344956398,0.647437334060669,0,-0.008709844201803207,0.013510128483176231,0.011482084169983864,1],[7,-6.155057474983849e-13,0.6545860767364502,-6.646980068580888e-7,0,-0.6545860767364502,-7.038664898324776e-13,-8.701650244802295e-8,0,-8.701650244802295e-8,6.646980068580888e-7,0.6545860767364502,0,-0.023755986243486404,-0.002684270730242133,-0.012262954376637936,1],[7,0.6544678807258606,-1.9434759579439742e-8,0.012440373189747334,0,0.007273427676409483,0.5310506820678711,-0.3826424479484558,0,-0.010092577897012234,0.3827115297317505,0.5309548377990723,0,-0.006925718393176794,0.012103002518415451,-0.02397383376955986,1],[7,0.6545860767364502,-4.0484302132881567e-8,1.8150498704017082e-7,0,9.062634198642172e-9,0.6450719237327576,0.11119817197322845,0,-1.8574417026684387e-7,-0.11119814962148666,0.6450721025466919,0,-0.007380083668977022,0.01788000762462616,-0.015813268721103668,1],[7,0.6545860767364502,7.040943586359479e-15,3.121311067388888e-7,0,-2.986116385272908e-7,-0.19056308269500732,0.626233696937561,0,9.08676085487059e-8,-0.626233696937561,-0.19056308269500732,0,0.0002690349647309631,0.011455359868705273,0.032788027077913284,1],[7,-0.6537306904792786,0.0209315437823534,-0.02609533630311489,0,0.005159350577741861,-0.4414235055446625,-0.4833236634731293,0,-0.03305263817310333,-0.48289796710014343,0.4406815469264984,0,-0.0009414005326107144,-0.025078032165765762,-0.01247877161949873,1],[7,-0.6545860171318054,9.814099755089956e-9,0.000003365599468452274,0,-0.0000021032255972386338,-0.5122209787368774,-0.40756934881210327,0,0.0000026275079108017962,-0.40756955742836,0.5122207403182983,0,-0.00031612793100066483,-0.0366215817630291,-0.006748612970113754,1],[7,-0.5670154690742493,-0.001055598957464099,0.327070951461792,0,-0.27481433749198914,0.3564779758453369,-0.4752722680568695,0,-0.17735153436660767,-0.5490040183067322,-0.3092314898967743,0,-0.023631738498806953,0.0022684389259666204,-0.04032844677567482,1],[7,-0.6545860767364502,1.3684226549213335e-13,0.000006341459538816707,0,-0.000006337448667181889,0.023276226595044136,-0.6541720628738403,0,-2.2549417622030887e-7,-0.6541720032691956,-0.023276228457689285,0,-0.00026934550260193646,0.012313800863921642,-0.03043850138783455,1],[7,-0.654168963432312,-0.023360740393400192,0.00043338880641385913,0,0.0017825023969635367,-0.062004510313272476,-0.6516404151916504,0,0.023296669125556946,-0.6512239575386047,0.06202862039208412,0,-0.00006388637848431244,-0.006304203998297453,-0.02987286075949669,1],[7,0.6545860767364502,-1.453472538588121e-16,-0.0000013057496062174323,0,0.0000013057496062174323,2.8612868518962387e-8,0.6545860767364502,0,5.693078522711961e-14,-0.6545860767364502,2.8612868518962387e-8,0,0.008358626626431942,0.01635134220123291,0.0010000180918723345,1],[7,0.6545860767364502,-1.453472141541427e-16,-0.000001930011421791278,0,0.000001930011421791278,2.8612868518962387e-8,0.6545860767364502,0,8.421814135829708e-14,-0.6545860767364502,2.8612868518962387e-8,0,-0.00860893726348877,-0.011625418439507484,0.001000060117803514,1],[7,0.6545860767364502,-1.453472141541427e-16,-0.000001930011421791278,0,0.000001930011421791278,2.8612868518962387e-8,0.6545860767364502,0,8.421814135829708e-14,-0.6545860767364502,2.8612868518962387e-8,0,-0.007849853485822678,0.01635134220123291,0.0010000579059123993,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,".bin",2757250274,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":40576,"length":3720,"count":930,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":84488,"length":3600,"count":900,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":40576,"count":634,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]},{"view":{"offset":44296,"length":40192,"count":628,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]]},"minPosition",8,[1,-0.0169683750718832,-0.06644736975431442,-0.05363176763057709],"maxPosition",8,[1,0.0169683750718832,0.00015554428682662547,0.036795418709516525]]],-1],0,0,[],[],[]],[[[38,"Black",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":9.607843137254903,"emissiveScale":0,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4281742902],"emissive",8,[4,4281742902]]],11]]],0,0,[0],[11],[7]],[[[38,"White",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":9.607843137254903,"emissiveScale":0,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4293388263]]],11]]],0,0,[0],[11],[7]],[[[23,".bin",2541588701,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0.16729655861854553]]],-1],0,0,[],[],[]],[[[38,"Material #2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[15,11],[72,7]],[[[65],[30,"LandSlot",[-2],[0,"95an+OubldT6T+CThiSs6p",-1,0]],[91,"Box001",1,[[17,-3,[2,"dfAGouzABfyq7dirJtfDdp"],[0],[14],1]],[0,"52Jz7GGJBZ4o3ZbXiqsxrh",1,0],[1,-0.1876899003982544,0,0.010877388529479504],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[73,74]],[[[23,".bin",3195812956,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":101424,"length":8928,"count":2232,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":101424,"count":2113,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7570797801017761,-0.04452315345406532,-0.9673821330070496],"maxPosition",8,[1,0.5575165152549744,2.4303321838378906,0.5997433066368103]]],-1],0,0,[],[],[]],[[{"name":"font_outlined","rect":{"x":1,"y":1,"width":519,"height":519},"offset":{"x":0,"y":0},"originalSize":{"width":521,"height":521},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-259.5,-259.5,0,259.5,-259.5,0,-259.5,259.5,0,259.5,259.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,520,520,520,1,1,520,1],"nuv":[0.0019193857965451055,0.0019193857965451055,0.9980806142034548,0.0019193857965451055,0.0019193857965451055,0.9980806142034548,0.9980806142034548,0.9980806142034548],"minPos":{"x":-259.5,"y":-259.5,"z":0},"maxPos":{"x":259.5,"y":259.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[75]],[[[23,".bin",2044544179,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33888,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33888,"count":706,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.510233461856842,-0.5433701872825623,-0.2633524537086487],"maxPosition",8,[1,0.6006349325180054,0.6778225302696228,0.7178273797035217]]],-1],0,0,[],[],[]],[[[20,"Tomato_2"],[29,"Tomato_2",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[47,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,3,3.2,3]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,76]],[[[163,"Garden"],[112,"BlockGroup","b0Y4X9ZghNwohdA7lswpga",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32]],[113,"UI_Canvas",33554432,"81+w69Bx5IVLhSvPTQ9RM7",[-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54],[[3,-33,[5,1920,1080]],[164,-35,-34],[165,45,5.684341886080802e-14,5.684341886080802e-14,-2.842170943040401e-14,-2.842170943040401e-14,-36],[170,-38,-37]],[1,960,540,0]],[48,"PopupBuyItem",false,33554432,2,[-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71],[[26,-55],[171,-56,150]]],[79,"PopupTool",false,33554432,2,[-75,-76,-77,-78,-79,-80,-81],[[3,-72,[5,100,120]],[172,-73,59],[87,20,50,-74]],[1,0,-430,0]],[48,"PopupUpgradeBlock",false,33554432,2,[-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94],[[26,-82],[173,-83]]],[48,"PopupStorage",false,33554432,2,[-99,-100,-101,-102,-103,-104,-105,-106],[[26,-95],[174,-98,[-96,-97],83,84]]],[48,"PopupShop",false,33554432,2,[-111,-112,-113,-114,-115,-116,-117,-118],[[26,-107],[175,-110,[-108,-109],113,114]]],[48,"PopupUnlockBlock",false,33554432,2,[-121,-122,-123,-124,-125,-126,-127,-128,-129,-130],[[26,-119],[176,-120]]],[48,"PopupUnlockRanch",false,33554432,2,[-133,-134,-135,-136,-137,-138,-139,-140,-141,-142],[[26,-131],[177,-132,186]]],[114,"Currencies",33554432,[-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155],[[26,-143]]],[79,"PopupRanchActivity",false,33554432,2,[-159,-160,-161,-162,-163],[[3,-156,[5,100,120]],[87,20,50,-157],[178,-158]],[1,0,-430,0]],[79,"PopupSelectSeed",false,33554432,2,[-167,-168,-169,-170,-171],[[3,-164,[5,100,120]],[87,20,50,-165],[179,-166,41,42]],[1,0,-430,0]],[48,"PopupQuest",false,33554432,2,[-174,-175,-176,-177,-178,-179],[[26,-172],[180,-173,94,95,96]]],[181,"Garden",[[-223,-224,[115,"PlantGroup","31Fo8XuCtBSJqATup1PpHY",-225],1,2,-226,-227,-228,-229],1,1,4,1,1,1,1,1,1],[135,"3e72df98-dfd0-40a5-9025-29c11e6f1677",[-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-202,-203,-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222]],[182,[183,20000.1,0.5208,[2,1,0.9529411764705882,0.39215686274509803,0.5208357291656249],[2,0.245603,0.246646,0.251197,0],[2,0.36244,0.486029,0.632565,0.5208],[2,0.437391,0.436011,0.436589,0]],[184,0.1,[4,2687052073]],[185,true,292,240,241],[186,true,400,1000,[4,4294759134]],[187]]],[31,"Tab_1",33554432,7,[-233,-234],[[33,-230,[5,160,119],[0,1,0.5]],[9,-231,106],[22,3,1.1,-232,[[78,"16f09yXeOdJM4fH9sPZLJVk","onChangeTab","1",7]],107]],[1,-595.654,27.399,0]],[31,"ButtonUpgrade",33554432,5,[-238,-239,-240],[[3,-235,[5,350,157]],[18,1,0,-236,162],[22,3,1.1,-237,[[21,"9b1c1zbOpxDVKxzk5lxxiVx","upgradeBlock",5]],163]],[1,0,-348.699,0]],[41,"ButtonUpgrade",33554432,12,[-245],[[26,-241],[18,1,0,-242,36],[98,3,1.1,-244,[[21,"88b43Dzh+dBnLrzmp5945Wu","onClickUpgrade",12]],[4,4292269782],-243,37]],[1,-380.082,190.605,0],[1,1.5,1.5,1]],[41,"ButtonUpgrade",33554432,4,[-250],[[26,-246],[18,1,0,-247,57],[98,3,1.1,-249,[[21,"9ddefGqg0dAVpQkQmCMz4vd","onClickUpgrade",4]],[4,4292269782],-248,58]],[1,-242.489,176.433,0],[1,1.5,1.5,1]],[80,"Bottom_Left",33554432,2,[-253,-254,-255],[[26,-251],[166,12,910,490,-252]]],[31,"Tab_0",33554432,6,[-259],[[33,-256,[5,160,119],[0,1,0.5]],[9,-257,73],[22,3,1.1,-258,[[78,"dbb14WtoL9BmLPG77ufF+Zl","onChangeTab","0",6]],74]],[1,-645,138.456,0]],[31,"Tab_1",33554432,6,[-263],[[33,-260,[5,160,119],[0,1,0.5]],[9,-261,76],[22,3,1.1,-262,[[78,"dbb14WtoL9BmLPG77ufF+Zl","onChangeTab","1",6]],77]],[1,-645,27.399,0]],[31,"Tab_0",33554432,7,[-267],[[33,-264,[5,160,119],[0,1,0.5]],[9,-265,102],[22,3,1.1,-266,[[78,"16f09yXeOdJM4fH9sPZLJVk","onChangeTab","0",7]],103]],[1,-595.654,138.456,0]],[31,"ButtonUnlock",33554432,9,[-271,-272],[[3,-268,[5,350,157]],[18,1,0,-269,180],[22,3,1.1,-270,[[21,"e23dbIcS0ZDUZvGDV5r1AiR","unlockRanch",9]],181]],[1,0,-299.665,0]],[116,"ButtonShop",false,33554432,12,[-276],[[3,-273,[5,94,98]],[22,3,1.1,-274,[[21,"88b43Dzh+dBnLrzmp5945Wu","onClickShop",12]],39],[9,-275,40]],[1,17.639,11.24,0],[1,1.3,1.3,1]],[31,"ButtonWater",33554432,4,[-280],[[3,-277,[5,114,144]],[9,-278,47],[22,3,1.1,-279,[[21,"9ddefGqg0dAVpQkQmCMz4vd","water",4]],48]],[1,-190.654,-8.179,0]],[31,"ButtonFertilize",33554432,4,[-284],[[3,-281,[5,134,142]],[9,-282,52],[22,3,1.1,-283,[[21,"9ddefGqg0dAVpQkQmCMz4vd","fertilize",4]],53]],[1,-12.715,2.946,0]],[117,"ButtonSetting",33554432,[-288],[[3,-285,[5,60,60]],[62,0,-286,61],[99,3,1.1,-287,62]],[1,-35.22,-40,0],[1,2,2,1]],[80,"Bottom_Right",33554432,2,[-291,-292],[[26,-289],[167,36,910,490,100,-290]]],[41,"ButtonFarm",33554432,28,[-296],[[26,-293],[18,1,0,-294,64],[22,3,1.1,-295,[[21,"f1b36959pFKfZ6QG9FL2X6r","onBtnFarmClick",2]],65]],[1,609,-425,0],[1,2,2,1]],[41,"ButtonZoo",33554432,28,[-300],[[26,-297],[18,1,0,-298,67],[22,3,1.1,-299,[[21,"f1b36959pFKfZ6QG9FL2X6r","onBtnZooClick",2]],68]],[1,830,-425,0],[1,2,2,1]],[41,"ButtonStorage",33554432,19,[-304],[[26,-301],[62,0,-302,70],[22,3,1.1,-303,[[21,"dbb14WtoL9BmLPG77ufF+Zl","show",6]],85]],[1,-863.54,-428.369,0],[1,1.5,1.5,1]],[41,"ButtonQuest",33554432,19,[-308],[[26,-305],[62,0,-306,87],[22,3,1.1,-307,[[21,"1baeadzTg9F1IHpiABy5qB2","show",13]],97]],[1,-698.931,-428.369,0],[1,1.5,1.5,1]],[41,"ButtonShop",33554432,19,[-312],[[26,-309],[62,0,-310,99],[22,3,1.1,-311,[[21,"16f09yXeOdJM4fH9sPZLJVk","show",7]],115]],[1,-531.7,-428.369,0],[1,1.5,1.5,1]],[31,"ButtonUnlock",33554432,8,[-316],[[3,-313,[5,300,157]],[18,1,0,-314,126],[22,3,1.1,-315,[[21,"3235dIxgRxG+6qViEfVOLYg","onUnlock",8]],127]],[1,0,-321.534,0]],[31,"ButtonBuy",33554432,3,[-320],[[3,-317,[5,300,157]],[18,1,0,-318,137],[22,3,1.1,-319,[[21,"52392Kv+75Ok4lgRKkKNTQr","buyItem",3]],138]],[1,0,-321.534,0]],[31,"ButtonShower",33554432,11,[-324],[[3,-321,[5,144,144]],[9,-322,191],[22,3,1.1,-323,[[21,"fac1fMiiYxACaxGF9i1K3DY","bathing",11]],192]],[1,-190.654,-5,0]],[31,"ButtonPet",33554432,11,[-328],[[3,-325,[5,125,125]],[9,-326,194],[22,3,1.1,-327,[[21,"fac1fMiiYxACaxGF9i1K3DY","petting",11]],195]],[1,161.166,-5,0]],[31,"ButtonFood",33554432,11,[-332],[[3,-329,[5,124,130]],[9,-330,197],[22,3,1.1,-331,[[21,"fac1fMiiYxACaxGF9i1K3DY","feeding",11]],198]],[1,-12.715,-5,0]],[92,"Map","4234jM/9ZEpLD8qxEoXvg3",14,[-333,-334,-335,-336]],[13,0,{},39,[10,"206WFyActfFYab8VYGP3ll",-340,[188,"76L3eReWpOdJ2+Zd4hd/jq",null,[[102,[1,["206WFyActfFYab8VYGP3ll"]],[-339]]],[[24,"HouseA",["_name"],[1,["206WFyActfFYab8VYGP3ll"]]],[6,["_lpos"],[1,["206WFyActfFYab8VYGP3ll"]],[1,49.28,0.608,-18.741]],[6,["_lrot"],[1,["206WFyActfFYab8VYGP3ll"]],[3,0,0.9999961977677758,0,-0.0027576167231126475]],[6,["_euler"],[1,["206WFyActfFYab8VYGP3ll"]],[1,0,-179.684,0]],[6,["_lscale"],[1,["53DFtdNilehYcEyqcOV2cC"]],[1,1,1,1]],[24,1,["_shadowCastingMode"],[1,["049j7gnZVdm5F/bgr6/701"]]],[24,1,["_shadowNormalBias"],[1,["049j7gnZVdm5F/bgr6/701"]]],[15,1,["_shadowBias"],-337],[35,["_materials","0"],-338,215]]],213]],[1,["5dKoQA71ZEp76xT0c5g+wz"]],[1,["14sb8EF9xV37UUNjK1kL1q"]],[92,"RanchGroup","7bl4qWsrZNUKt3X1/6b6y7",14,[-341,-342,-343,-344]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[16,"ButtonClose",33554432,12,[[3,-345,[5,40,40]],[18,1,0,-346,33],[22,3,1.1,-347,[[21,"88b43Dzh+dBnLrzmp5945Wu","hide",12]],34]],[1,449.32,58.511,0],[1,1.5,1.5,1]],[16,"ButtonClose",33554432,4,[[3,-348,[5,40,40]],[18,1,0,-349,44],[22,3,1.1,-350,[[21,"9ddefGqg0dAVpQkQmCMz4vd","hide",4]],45]],[1,290.051,55.738,0],[1,1.5,1.5,1]],[7,"ButtonHarvest",33554432,4,[[3,-351,[5,142,150]],[9,-352,49],[22,3,1.1,-353,[[21,"9ddefGqg0dAVpQkQmCMz4vd","harvest",4]],50]],[1,161.166,-5,0]],[118,"ButtonPesticides",false,33554432,4,[[3,-354,[5,112,138]],[9,-355,54],[99,3,1.1,-356,55]],[1,-19.071,-5,0]],[31,"Top_Right",33554432,2,[27],[[26,-357],[168,33,-358]],[1,910,490,0]],[27,"Mask",33554432,6,[[3,-359,[5,3000,1500]],[51,1,0,-360,[4,2701131775],71],[52,-361]]],[16,"ButtonClose",33554432,6,[[3,-362,[5,57,57]],[9,-363,80],[22,3,1.1,-364,[[21,"dbb14WtoL9BmLPG77ufF+Zl","hide",6]],81]],[1,585.288,244.668,0],[1,1.5,1.5,1]],[27,"Mask",33554432,13,[[3,-365,[5,3000,1500]],[51,1,0,-366,[4,2701131775],88],[52,-367]]],[16,"ButtonClose",33554432,13,[[3,-368,[5,57,57]],[9,-369,91],[22,3,1.1,-370,[[21,"1baeadzTg9F1IHpiABy5qB2","hide",13]],92]],[1,587.798,309.964,0],[1,1.5,1.5,1]],[27,"Mask",33554432,7,[[3,-371,[5,3000,1500]],[51,1,0,-372,[4,2701131775],100],[52,-373]]],[16,"ButtonClose",33554432,7,[[3,-374,[5,57,57]],[9,-375,110],[22,3,1.1,-376,[[21,"16f09yXeOdJM4fH9sPZLJVk","hide",7]],111]],[1,536.609,244.668,0],[1,1.5,1.5,1]],[27,"Mask",33554432,8,[[3,-377,[5,3000,1500]],[51,1,0,-378,[4,2701131775],116],[52,-379]]],[16,"ButtonClose",33554432,8,[[3,-380,[5,57,57]],[9,-381,119],[22,3,1.1,-382,[[21,"3235dIxgRxG+6qViEfVOLYg","hide",8]],120]],[1,402.757,411.27,0],[1,1.5,1.5,1]],[41,"btn_background_round",33554432,8,[-385],[[3,-383,[5,212,212]],[9,-384,123]],[1,0,158.142,0],[1,1.5,1.5,1]],[27,"Mask",33554432,3,[[3,-386,[5,3000,1500]],[51,1,0,-387,[4,2701131775],130],[52,-388]]],[16,"ButtonClose",33554432,3,[[3,-389,[5,57,57]],[9,-390,133],[22,3,1.1,-391,[[21,"52392Kv+75Ok4lgRKkKNTQr","hide",3]],134]],[1,397.596,411.27,0],[1,1.5,1.5,1]],[7,"ButtonAdd",33554432,3,[[3,-392,[5,100,104]],[9,-393,144],[100,-394,[[21,"52392Kv+75Ok4lgRKkKNTQr","increaseQuantity",3]],145]],[1,139.839,-53,0]],[7,"ButtonRemove",33554432,3,[[3,-395,[5,100,104]],[9,-396,146],[100,-397,[[21,"52392Kv+75Ok4lgRKkKNTQr","decreaseQuantity",3]],147]],[1,-138.46,-54.023,0]],[27,"Mask",33554432,5,[[3,-398,[5,3000,1500]],[51,1,0,-399,[4,2701131775],151],[52,-400]]],[16,"ButtonClose",33554432,5,[[3,-401,[5,57,57]],[9,-402,154],[22,3,1.1,-403,[[21,"9b1c1zbOpxDVKxzk5lxxiVx","hide",5]],155]],[1,402.561,411.27,0],[1,1.5,1.5,1]],[41,"btn_background_round",33554432,5,[-406],[[3,-404,[5,212,212]],[9,-405,158]],[1,0,158.142,0],[1,1.5,1.5,1]],[27,"Mask",33554432,9,[[3,-407,[5,3000,1500]],[51,1,0,-408,[4,2701131775],168],[52,-409]]],[16,"ButtonClose",33554432,9,[[3,-410,[5,57,57]],[9,-411,171],[22,3,1.1,-412,[[21,"e23dbIcS0ZDUZvGDV5r1AiR","hide",9]],172]],[1,397.596,358.84,0],[1,1.5,1.5,1]],[16,"ButtonClose",33554432,11,[[3,-413,[5,40,40]],[18,1,0,-414,188],[22,3,1.1,-415,[[21,"fac1fMiiYxACaxGF9i1K3DY","hide",11]],189]],[1,293.372,57.64,0],[1,1.5,1.5,1]],[80,"Top_Left",33554432,2,[10],[[26,-416],[169,9,910,490,-417]]],[13,0,null,39,[10,"27mzaN23VR478JJDBj4b/o",-421,[189,"b4mC76M3BIObxdaB6h1VWz",null,[[102,[1,["c9E10DwfZfGr9iiyNV2Q3b"]],[-420]]],[[104,[1,["f52A77uAhafL+n37f8pJ9h"]],[[105,true,[218],219]]]],[[24,"WaterWheel",["_name"],[1,["27mzaN23VR478JJDBj4b/o"]]],[6,["_lpos"],[1,["27mzaN23VR478JJDBj4b/o"]],[1,87.082,0,59.408]],[6,["_lrot"],[1,["27mzaN23VR478JJDBj4b/o"]],[3,0,0,0,1]],[6,["_euler"],[1,["27mzaN23VR478JJDBj4b/o"]],[1,0,0,0]],[6,["_lpos"],[1,["c9E10DwfZfGr9iiyNV2Q3b"]],[1,0,0,0]],[6,["_lscale"],[1,["c9E10DwfZfGr9iiyNV2Q3b"]],[1,1,1,1]],[6,["_lscale"],[1,["27mzaN23VR478JJDBj4b/o"]],[1,3,3,3]],[103,["_materials","0"],[1,["c2dMW41uRXa4Je62YT7TtT"]],220],[35,["_materials","0"],-418,221],[24,1,["_shadowCastingMode"],[1,["c2dMW41uRXa4Je62YT7TtT"]]],[15,1,["_shadowCastingMode"],-419]]],216]],[1,["fcTF/wge1Yj4RHb3yuihdn"]],[1,["0eMbovdd9awYI3A+Yj2ebm"]],[1,["beJUnU0W5bJpq3/vGbKzub"]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-422,[46,"e2jY1BnhNPI4UtA6EgASxo",null,[[24,"Block_0",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,-11.074,1.146,4.44]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],0]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-423,[19,"9aEffzX4xHrYSxfvrCLrC9",[[15,"Block_1",["_name"],44],[4,["_lpos"],44,[1,-3.795,1.146,4.509]],[4,["_lrot"],44,[3,0,0,0,1]],[4,["_euler"],44,[1,0,0,0]]]],1]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-424,[19,"5aA7Bjd9JCBYaJ0qMgFje+",[[15,"Block_2",["_name"],45],[4,["_lpos"],45,[1,3.153,1.146,4.433]],[4,["_lrot"],45,[3,0,0,0,1]],[4,["_euler"],45,[1,0,0,0]]]],2]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-425,[19,"1d4nIJc4hKuY4WX0kVd4Kn",[[15,"Block_3",["_name"],46],[4,["_lpos"],46,[1,-11.074,1.146,10.427]],[4,["_lrot"],46,[3,0,0,0,1]],[4,["_euler"],46,[1,0,0,0]]]],3]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-426,[19,"e8VgQVcE5JFLiCufoue2GF",[[15,"Block_4",["_name"],47],[4,["_lpos"],47,[1,-3.593,1.146,10.525]],[4,["_lrot"],47,[3,0,0,0,1]],[4,["_euler"],47,[1,0,0,0]]]],4]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-427,[19,"eejshsXgZN5a1VWrF9jjKY",[[15,"Block_5",["_name"],48],[4,["_lpos"],48,[1,3.254,1.146,10.473]],[4,["_lrot"],48,[3,0,0,0,1]],[4,["_euler"],48,[1,0,0,0]]]],5]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-428,[19,"33xF+jhmJDR57labV8yohG",[[15,"Block_6",["_name"],49],[4,["_lpos"],49,[1,-11.211,1.146,16.537]],[4,["_lrot"],49,[3,0,0,0,1]],[4,["_euler"],49,[1,0,0,0]]]],6]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-429,[19,"81mL/XBcVDzZ4WYWoOenhi",[[15,"Block_7",["_name"],50],[4,["_lpos"],50,[1,-3.586,1.146,16.512]],[4,["_lrot"],50,[3,0,0,0,1]],[4,["_euler"],50,[1,0,0,0]]]],7]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-430,[19,"40ct2MiepOtbpCbBEJ5A+Q",[[15,"Block_8",["_name"],51],[4,["_lpos"],51,[1,3.252,1.146,16.526]],[4,["_lrot"],51,[3,0,0,0,1]],[4,["_euler"],51,[1,0,0,0]]]],8]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-431,[19,"76J01dYwdIeLXkXbx+agFs",[[15,"Block_9",["_name"],52],[4,["_lpos"],52,[1,18.977,1.146,4.316]],[4,["_lrot"],52,[3,0,0,0,1]],[4,["_euler"],52,[1,0,0,0]]]],9]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-432,[19,"e5LNMTZNpJ4ZZXRwdII8kc",[[15,"Block_10",["_name"],53],[4,["_lpos"],53,[1,19.168,1.146,10.429]],[4,["_lrot"],53,[3,0,0,0,1]],[4,["_euler"],53,[1,0,0,0]]]],10]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-433,[19,"64ssTiAYdB1qzpF1r4MUP8",[[15,"Block_11",["_name"],54],[4,["_lpos"],54,[1,19.337,1.146,16.584]],[4,["_lrot"],54,[3,0,0,0,1]],[4,["_euler"],54,[1,0,0,0]]]],11]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-434,[19,"ed91y5M2xNCqYP5ruS7fDV",[[24,"Block_12",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,-11.074,1.146,33.615]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],12]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-435,[19,"50y++bQOxFJI5yiG/+Wy7f",[[15,"Block_13",["_name"],55],[4,["_lpos"],55,[1,-3.795,1.146,33.684]],[4,["_lrot"],55,[3,0,0,0,1]],[4,["_euler"],55,[1,0,0,0]]]],13]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-436,[19,"c09QKocCFPmaRfWoUMv/3z",[[15,"Block_14",["_name"],56],[4,["_lpos"],56,[1,3.153,1.146,33.608]],[4,["_lrot"],56,[3,0,0,0,1]],[4,["_euler"],56,[1,0,0,0]]]],14]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-437,[19,"fbT9I2tWdN74fATyCikJrr",[[15,"Block_15",["_name"],57],[4,["_lpos"],57,[1,-11.074,1.146,39.602]],[4,["_lrot"],57,[3,0,0,0,1]],[4,["_euler"],57,[1,0,0,0]]]],15]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-438,[19,"035iUm4OpGl7FWusw7or+m",[[15,"Block_16",["_name"],58],[4,["_lpos"],58,[1,-3.593,1.146,39.7]],[4,["_lrot"],58,[3,0,0,0,1]],[4,["_euler"],58,[1,0,0,0]]]],16]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-439,[19,"f2eP0BmBVGIJ44MGY6/y/4",[[15,"Block_17",["_name"],59],[4,["_lpos"],59,[1,3.254,1.146,39.648]],[4,["_lrot"],59,[3,0,0,0,1]],[4,["_euler"],59,[1,0,0,0]]]],17]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-440,[19,"c4W2La5yRMSppyyPQ5NcV4",[[15,"Block_18",["_name"],60],[4,["_lpos"],60,[1,-11.211,1.146,45.712]],[4,["_lrot"],60,[3,0,0,0,1]],[4,["_euler"],60,[1,0,0,0]]]],18]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-441,[19,"06XBQeQ/xNQqEnHO6+sKEc",[[15,"Block_19",["_name"],61],[4,["_lpos"],61,[1,-3.586,1.146,45.687]],[4,["_lrot"],61,[3,0,0,0,1]],[4,["_euler"],61,[1,0,0,0]]]],19]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-442,[19,"bd9xi+h8lDtbvcmF1QjTAz",[[15,"Block_20",["_name"],62],[4,["_lpos"],62,[1,3.252,1.146,45.701]],[4,["_lrot"],62,[3,0,0,0,1]],[4,["_euler"],62,[1,0,0,0]]]],20]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-443,[19,"3cVnmJJwJHR5Bd2pZ09DEB",[[15,"Block_21",["_name"],63],[4,["_lpos"],63,[1,24.112,1.146,37.087]],[4,["_lrot"],63,[3,0,0,0,1]],[4,["_euler"],63,[1,0,0,0]]]],21]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-444,[19,"1cyrQ2b1VAn7PRT+XRAAWm",[[15,"Block_22",["_name"],64],[4,["_lpos"],64,[1,31.597,1.146,37.087]],[4,["_lrot"],64,[3,0,0,0,1]],[4,["_euler"],64,[1,0,0,0]]]],22]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-445,[19,"222HRij4pPtYtFJ9XG0H1a",[[15,"Block_23",["_name"],65],[4,["_lpos"],65,[1,39.042,1.146,37.087]],[4,["_lrot"],65,[3,0,0,0,1]],[4,["_euler"],65,[1,0,0,0]]]],23]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-446,[46,"64MsnLwFNGPKUSr2AoPxGh",null,[[24,"Block_24",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,24.478,1.146,43.95]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],24]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-447,[19,"54pRuwbHxLiZnQmHzCeBs2",[[24,"Block_25",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,31.712,1.146,43.95]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],25]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-448,[19,"84pFaZbpFNwqs6B+knkZ3M",[[24,"Block_26",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,39.352,1.146,43.95]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],26]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-449,[19,"e8jNqDB39Kw4C5pSMAKfF7",[[24,"Block_27",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,51.532,1.146,37.872]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],27]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-450,[19,"d4GZAQBYZHMYC6WOXPVx0L",[[24,"Block_28",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,58.015,1.146,37.872]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],28]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-451,[19,"a7Zj8+oSFLLZ2K0VT3yGyK",[[24,"Block_29",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,51.766,1.146,44.153]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],29]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-452,[46,"9a9Y9tsl5OrrJ36CkGtG8x",null,[[24,"Block_30",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,51.766,1.146,44.153]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],30]],[13,0,{},1,[10,"c46/YsCPVOJYA4mWEpNYRx",-453,[19,"94z2a/7gdNO6sZ8bhnOmqQ",[[24,"Block_31",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,58.354,1.146,44.153]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]]]],31]],[27,"Background",33554432,12,[[3,-454,[5,980,200]],[18,1,0,-455,32]]],[16,"ico_upgrade",33554432,17,[[3,-456,[5,109,139]],[9,-457,35]],[1,0,1.397,0],[1,0.5,0.5,1]],[7,"Label",33554432,24,[[3,-458,[5,87.78,40]],[54,"Shop",40,false,-459,38]],[1,0,-43.521,0]],[27,"Background",33554432,4,[[3,-460,[5,670,200]],[18,1,0,-461,43]]],[7,"LabelNumber",33554432,25,[[3,-462,[5,61.11,40]],[54,"x10",40,false,-463,46]],[1,30,-45,0]],[7,"LabelNumber",33554432,26,[[3,-464,[5,61.11,40]],[54,"x10",40,false,-465,51]],[1,44.178,-53.757,0]],[16,"ico_upgrade",33554432,18,[[3,-466,[5,109,139]],[9,-467,56]],[1,0,1.397,0],[1,0.5,0.5,1]],[16,"icon",33554432,27,[[3,-468,[5,90,84]],[9,-469,60]],[1,0.794,1.6469999999999998,0],[1,0.5,0.5,1]],[16,"icon",33554432,29,[[3,-470,[5,132,132]],[9,-471,63]],[1,1,1,0],[1,0.6,0.6,1]],[16,"icon",33554432,30,[[3,-472,[5,128,130]],[9,-473,66]],[1,0,1,0],[1,0.6,0.6,1]],[16,"icon",33554432,31,[[3,-474,[5,118,118]],[9,-475,69]],[1,0.794,8.968,0],[1,0.5,0.5,1]],[7,"tab_ico_1",33554432,20,[[3,-476,[5,90,76]],[9,-477,72]],[1,-69.43700000000001,0.7160000000000082,0]],[7,"tab_ico_2",33554432,21,[[3,-478,[5,80,84]],[9,-479,75]],[1,-67.989,0.933,0]],[27,"popup_bg_0",33554432,6,[[3,-480,[5,1300,600]],[18,1,0,-481,78]]],[7,"popup_bg_1",33554432,6,[[3,-482,[5,1240,470]],[18,1,0,-483,79]],[1,0,-40,0]],[7,"Title",33554432,6,[[3,-484,[5,251,144]],[28,"Storage",0,72,72,144,false,1,-485,82]],[1,0,220,0]],[16,"icon",33554432,32,[[3,-486,[5,115,113]],[9,-487,86]],[1,0.794,1.6469999999999998,0],[1,0.5,0.5,1]],[27,"popup_bg_0",33554432,13,[[3,-488,[5,1300,730]],[18,1,0,-489,89]]],[7,"popup_bg_1",33554432,13,[[3,-490,[5,1240,600]],[18,1,0,-491,90]],[1,0,-40,0]],[7,"Title",33554432,13,[[3,-492,[5,385,144]],[28,"Daily Quest",0,72,72,144,false,1,-493,93]],[1,0,281.322,0]],[16,"icon",33554432,33,[[3,-494,[5,94,98]],[9,-495,98]],[1,0.794,1.6469999999999998,0],[1,0.5,0.5,1]],[7,"tab_ico_1",33554432,22,[[3,-496,[5,90,76]],[9,-497,101]],[1,-69.43700000000001,0.7160000000000082,0]],[7,"tab_ico_2",33554432,15,[[3,-498,[5,80,84]],[9,-499,104]],[1,-67.989,0.933,0]],[16,"tool_pesticides",33554432,15,[[3,-500,[5,112,138]],[9,-501,105]],[1,-38.434,-11.733,0],[1,0.4,0.4,1]],[27,"popup_bg_0",33554432,7,[[3,-502,[5,1200,600]],[18,1,0,-503,108]]],[7,"popup_bg_1",33554432,7,[[3,-504,[5,1140,470]],[18,1,0,-505,109]],[1,0,-40,0]],[7,"Title",33554432,7,[[3,-506,[5,244,72]],[28,"Market",0,72,72,72,false,1,-507,112]],[1,0,250.952,0]],[27,"popup_bg_0",33554432,8,[[3,-508,[5,920,930]],[18,1,0,-509,117]]],[7,"popup_bg_1",33554432,8,[[3,-510,[5,880,800]],[18,1,0,-511,118]],[1,0,-40,0]],[7,"Title",33554432,8,[[3,-512,[5,569,144]],[28,"Farm plot Unlock",0,72,72,144,false,1,-513,121]],[1,0,381.977,0]],[16,"img_block",33554432,79,[[3,-514,[5,335,201]],[9,-515,122]],[1,0,3.633,0],[1,0.7,0.7,1]],[7,"Label",33554432,8,[[3,-516,[5,644.58,72]],[28,"unlock new Farm plot",0,65,65,72,false,1,-517,124]],[1,0,-39.769,0]],[27,"Label",33554432,34,[[3,-518,[5,204.93,72]],[28,"Unlock",0,65,65,72,false,1,-519,125]]],[7,"ico_currency_cash",33554432,8,[[3,-520,[5,64,64]],[9,-521,128]],[1,-77.459,-181.05,0]],[7,"LabelPrice",33554432,8,[[33,-522,[5,45.14,72],[0,0,0.5]],[63,"0",0,65,65,72,false,1,-523,129]],[1,-26.334,-173.23,0]],[27,"popup_bg_0",33554432,3,[[3,-524,[5,920,930]],[18,1,0,-525,131]]],[7,"popup_bg_1",33554432,3,[[3,-526,[5,880,800]],[18,1,0,-527,132]],[1,0,-40,0]],[7,"Title",33554432,3,[[3,-528,[5,298,144]],[28,"Buy Item",0,72,72,144,false,1,-529,135]],[1,0,381.977,0]],[27,"Label",33554432,35,[[3,-530,[5,120.07,72]],[28,"Buy",0,65,65,72,false,1,-531,136]]],[16,"storage_item_bg",33554432,3,[[3,-532,[5,155,157]],[9,-533,139]],[1,0,195.482,0],[1,1.5,1.5,1]],[7,"ItemImage",33554432,3,[[3,-534,[5,150,128]],[9,-535,140]],[1,0,196.463,0]],[7,"Title-001",33554432,3,[[3,-536,[5,189.58,60]],[28,"Quanity",0,50,50,60,false,1,-537,141]],[1,0,35.654,0]],[16,"bg_black",33554432,3,[[3,-538,[5,300,100]],[18,1,0,-539,142]],[1,0,-53,0],[1,0.8,0.8,1]],[7,"LabelQuantity",33554432,3,[[3,-540,[5,41.67,60]],[28,"0",0,60,60,60,false,1,-541,143]],[1,0,-42.199,0]],[7,"LabelPrice",33554432,3,[[3,-542,[5,41.67,60]],[28,"0",0,60,60,60,false,1,-543,148]],[1,-20.971,-152.717,0]],[16,"IconCurrency",33554432,3,[[3,-544,[5,64,64]],[9,-545,149]],[1,0,-163.801,0],[1,0.8,0.8,1]],[27,"popup_bg_0",33554432,5,[[3,-546,[5,920,930]],[18,1,0,-547,152]]],[7,"popup_bg_1",33554432,5,[[3,-548,[5,880,800]],[18,1,0,-549,153]],[1,0,-40,0]],[7,"Title",33554432,5,[[3,-550,[5,632,144]],[28,"Farm plot Upgrade",0,72,72,144,false,1,-551,156]],[1,0,381.977,0]],[16,"img_block",33554432,86,[[3,-552,[5,335,201]],[9,-553,157]],[1,0,3.633,0],[1,0.7,0.7,1]],[7,"Label",33554432,16,[[3,-554,[5,201.39,72]],[28,"Upgrade",0,50,50,72,false,1,-555,159]],[1,0,42.979,0]],[7,"IconCurrency",33554432,16,[[3,-556,[5,64,64]],[9,-557,160]],[1,48.524,-17.782,0]],[7,"LabelPrice",33554432,16,[[3,-558,[5,45.14,72]],[63,"0",0,65,65,72,false,1,-559,161]],[1,-25.702,-9.962,0]],[7,"PropertyLabel",33554432,5,[[33,-560,[5,121.88,45],[0,1,0.5]],[28,"Level:",0,45,45,45,false,1,-561,164]],[1,-107.101,-35,0]],[7,"CurrentLevelLabel",33554432,5,[[33,-562,[5,65,45],[0,0,0.5]],[28,"lvl1",0,45,45,45,false,1,-563,165]],[1,-71.802,-35,0]],[7,"IconArrow",33554432,5,[[3,-564,[5,42,46]],[9,-565,166]],[1,73.298,-35,0]],[7,"NextLevelLabel",33554432,5,[[33,-566,[5,76.25,45],[0,0,0.5]],[28,"lvl2",0,45,45,45,false,1,-567,167]],[1,149.942,-35,0]],[27,"popup_bg_0",33554432,9,[[3,-568,[5,920,830]],[18,1,0,-569,169]]],[7,"popup_bg_1",33554432,9,[[3,-570,[5,880,700]],[18,1,0,-571,170]],[1,0,-40,0]],[7,"Title",33554432,9,[[3,-572,[5,481,144]],[28,"Unlock Animal",0,72,72,144,false,1,-573,173]],[1,0,329.547,0]],[16,"btn_background_round",33554432,9,[[3,-574,[5,212,212]],[9,-575,174]],[1,0,130.727,0],[1,1.5,1.5,1]],[16,"IconAnimal",33554432,9,[[3,-576,[5,150,130]],[62,0,-577,175]],[1,0,134.009,0],[1,1.3,1.3,1]],[7,"Label",33554432,23,[[3,-578,[5,157.64,72]],[28,"Unlock",0,50,50,72,false,1,-579,176]],[1,0,30.449,0]],[7,"TextPrice",33554432,23,[[3,-580,[5,170.82999999999998,75.6]],[106,60,"500<img src='ico_currency_cash' offset=-15 />",60,false,false,-581,177,178,179]],[1,0,-10.627,0]],[7,"LabelName",33554432,9,[[3,-582,[5,107.92,70]],[28,"Pig",0,70,70,70,false,1,-583,182]],[1,0,-64.327,0]],[7,"RichText",33554432,9,[[3,-584,[5,279.15999999999997,75.6]],[106,60,"500<img src='ico_currency_cash' offset=-15 />/12h",60,false,false,-585,183,184,185]],[1,0,-148.009,0]],[27,"Background",33554432,11,[[3,-586,[5,670,200]],[18,1,0,-587,187]]],[7,"Label",33554432,36,[[3,-588,[5,97.78,40]],[54,"12:00",40,false,-589,190]],[1,24.615,-50,0]],[7,"Label",33554432,37,[[3,-590,[5,97.78,40]],[54,"12:00",40,false,-591,193]],[1,2.292,-50,0]],[7,"Label",33554432,38,[[3,-592,[5,97.78,40]],[54,"12:00",40,false,-593,196]],[1,1.662,-50,0]],[16,"bg_black_0",33554432,10,[[33,-594,[5,450,100],[0,0,0.5]],[18,1,0,-595,199]],[1,-901.623,480,0],[1,0.7,0.7,1]],[16,"bg_black-1",33554432,10,[[33,-596,[5,450,100],[0,0,0.5]],[18,1,0,-597,200]],[1,-476.844,480,0],[1,0.7,0.7,1]],[16,"bg_black-2",33554432,10,[[33,-598,[5,350,100],[0,0,0.5]],[18,1,0,-599,201]],[1,-54.462,480,0],[1,0.7,0.7,1]],[7,"Water",33554432,10,[[33,-600,[5,31.25,45],[0,0,0.5]],[63,"0",0,45,45,45,false,1,-601,202]],[1,-8.865,487,0]],[7,"Gold",33554432,10,[[33,-602,[5,31.25,45],[0,0,0.5]],[63,"0",0,45,45,45,false,1,-603,203]],[1,-431.821,487,0]],[7,"Cash",33554432,10,[[33,-604,[5,31.25,45],[0,0,0.5]],[63,"0",0,45,45,45,false,1,-605,204]],[1,-840.634,487,0]],[16,"ico_currency_cash",33554432,10,[[3,-606,[5,64,64]],[9,-607,205]],[1,-892.206,480,0],[1,1.3,1.3,1]],[16,"ico_currency_gold",33554432,10,[[3,-608,[5,60,64]],[9,-609,206]],[1,-478.664,480,0],[1,1.3,1.3,1]],[16,"ico_currency_water",33554432,10,[[3,-610,[5,54,64]],[9,-611,207]],[1,-56.062,480,0],[1,1.3,1.3,1]],[16,"AddCash",33554432,10,[[3,-612,[5,100,104]],[9,-613,208]],[1,-592.272,480,0],[1,0.8,0.8,1]],[16,"AddGold",33554432,10,[[3,-614,[5,100,104]],[9,-615,209]],[1,-160.98,480,0],[1,0.8,0.8,1]],[16,"AddWater",33554432,10,[[3,-616,[5,100,104]],[9,-617,210]],[1,178.815,480,0],[1,0.8,0.8,1]],[13,0,{},39,[10,"52FZ4kbjJQ05Bh9aFNRMya",-618,[46,"fdf3GOOURJuoxPWqL0VgcB",null,[[24,"Map_BG",["_name"],[1,["52FZ4kbjJQ05Bh9aFNRMya"]]],[6,["_lpos"],[1,["52FZ4kbjJQ05Bh9aFNRMya"]],[1,28.096,0,142.128]],[6,["_lrot"],[1,["52FZ4kbjJQ05Bh9aFNRMya"]],[3,0,0,0,1]],[6,["_euler"],[1,["52FZ4kbjJQ05Bh9aFNRMya"]],[1,0,0,0]],[6,["_lscale"],[1,["52FZ4kbjJQ05Bh9aFNRMya"]],[1,3,3,3]],[103,["_materials","0"],[1,["24LpwU7LJZ3J1i5cPiv3OU"]],212],[24,0,["_shadowCastingMode"],[1,["24LpwU7LJZ3J1i5cPiv3OU"]]],[24,0,["_shadowNormalBias"],[1,["24LpwU7LJZ3J1i5cPiv3OU"]]],[24,0,["_shadowBias"],[1,["24LpwU7LJZ3J1i5cPiv3OU"]]],[24,true,["_active"],[1,["14HLs2dpxU7rXh+QNQS1J0"]]]]],211]],[128,0,40,[10,"5dKoQA71ZEp76xT0c5g+wz",-621,[46,"9eZUG9jcdO+anLQalezecY",null,[[24,"SmokeHouse",["_name"],[1,["5dKoQA71ZEp76xT0c5g+wz"]]],[6,["_lpos"],[1,["5dKoQA71ZEp76xT0c5g+wz"]],[1,0.258,18.768,-0.195]],[6,["_lrot"],[1,["5dKoQA71ZEp76xT0c5g+wz"]],[3,0,0,0,1]],[4,["_euler"],-619,[1,0,0,0]],[4,["_lscale"],-620,[1,2,2,2]]]],214],[{},"mountedRoot",1,40]],[131,0,[119,"New Node"],[10,"5dKoQA71ZEp76xT0c5g+wz",-622,[19,"6fV1hLmnFMMYawDI6BZpZP",[[15,"Water",["_name"],41],[4,["_lpos"],41,[1,2.175,2.599,1.172]],[4,["_lrot"],41,[3,0,0,0,1]],[4,["_euler"],41,[1,0,0,0]],[4,["_lscale"],41,[1,1,1,1]]]],217],[{},"mountedRoot",1,91]],[13,0,{},39,[10,"14sb8EF9xV37UUNjK1kL1q",-623,[190,"868MCavudBlLt+Cg3LkZX+",[[104,[1,["21zK/vFMhdSbPn59XYJmOc"]],[[105,true,[223],224]]]],[[4,["_lpos"],42,[1,-46.039,0,14.623]],[15,"Windmill",["_name"],42],[4,["_lrot"],42,[3,0,-0.6916139100775258,0,-0.722267401581489]],[4,["_euler"],42,[1,0,-272.484,0]],[4,["_lscale"],42,[1,1.5,1.5,1.5]],[24,1,["_shadowCastingMode"],[1,["d5CltKBOlYhJk75HbOQAc0"]]],[24,1,["_shadowCastingMode"],[1,["5bSecZvulZEKxuOODnzMZU"]]]]],222]],[13,0,{},43,[10,"c46/YsCPVOJYA4mWEpNYRx",-629,[46,"e2V/zPloJFgINjg3GmIx6z",null,[[24,"Ranch_0",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,147.892,1.107,81.122]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]],[6,["_lscale"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,1,1,1]],[35,["animalPrefab"],-624,226],[35,["animalIcon"],-625,227],[6,["_contentSize"],[1,["e0XdqyQHJNXLdCNK/1ZLv0"]],[5,150,128]],[4,["_lscale"],-626,[1,2,1,2]],[4,["_lpos"],-627,[1,0,-1.5,0]],[6,["_contentSize"],[1,["bflTvTKXxAFJG0UyEMssLj"]],[5,150,130]],[15,0,["index"],-628]]],225]],[1,["e8kwWA5whP66fh9uQktgCo"]],[13,0,{},43,[10,"c46/YsCPVOJYA4mWEpNYRx",-633,[19,"dcckVQyiRGNKviME3J/9wR",[[24,"Ranch_1",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,113.521,2.781,89.333]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0.040280025562922414,0,0.9991884304477561]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,4.617,0]],[6,["_lscale"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,1,1,1]],[35,["animalPrefab"],-630,229],[35,["animalIcon"],-631,230],[6,["_contentSize"],[1,["e0XdqyQHJNXLdCNK/1ZLv0"]],[5,150,128]],[6,["_lscale"],[1,["13jiQkbclGKox916z0n0wn"]],[1,2.5,1,2.5]],[6,["_contentSize"],[1,["bflTvTKXxAFJG0UyEMssLj"]],[5,150,130]],[15,1,["index"],-632]]],228]],[1,["e8kwWA5whP66fh9uQktgCo"]],[13,0,{},43,[10,"c46/YsCPVOJYA4mWEpNYRx",-639,[46,"9fzq65VmBMh7u++6Fd4SX+",null,[[24,"Ranch_2",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,114.803,2.842,63.104]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0.04360195067784048,0,0.9990489827316212]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,4.998,0]],[6,["_lscale"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,1,1,1]],[35,["animalPrefab"],-634,232],[35,["animalIcon"],-635,233],[6,["_contentSize"],[1,["e0XdqyQHJNXLdCNK/1ZLv0"]],[5,150,128]],[4,["_lscale"],-636,[1,2.3,1,2.3]],[4,["_lpos"],-637,[1,0,-1,-0.657]],[6,["_contentSize"],[1,["bflTvTKXxAFJG0UyEMssLj"]],[5,150,130]],[15,2,["index"],-638]]],231]],[1,["e8kwWA5whP66fh9uQktgCo"]],[13,0,{},43,[10,"c46/YsCPVOJYA4mWEpNYRx",-645,[46,"37firCNN9HJIKvRPzwRfAz",null,[[24,"Ranch_3",["_name"],[1,["c46/YsCPVOJYA4mWEpNYRx"]]],[6,["_lpos"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,120.948,7.474,118.636]],[6,["_lrot"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[6,["_euler"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]],[6,["_lscale"],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,1,1,1]],[35,["animalPrefab"],-640,235],[35,["animalIcon"],-641,236],[6,["_contentSize"],[1,["e0XdqyQHJNXLdCNK/1ZLv0"]],[5,150,128]],[4,["_lscale"],-642,[1,2,1,2.2]],[4,["_lpos"],-643,[1,-0.639,-5.177,3.658]],[6,["_contentSize"],[1,["bflTvTKXxAFJG0UyEMssLj"]],[5,150,130]],[15,3,["index"],-644]]],234]],[1,["e8kwWA5whP66fh9uQktgCo"]],[13,0,null,14,[10,"fcTF/wge1Yj4RHb3yuihdn",-646,[19,"12u2jZBHRMpoewaXT2NgMi",[[4,["_lpos"],92,[1,140.848,4.833,0.038]],[15,"Market",["_name"],92],[4,["_lrot"],92,[3,0,0,0,1]],[4,["_euler"],92,[1,0,0,0]],[4,["_lpos"],93,[1,0,0,0]],[4,["_lscale"],93,[1,1,1,1]],[4,["_lrot"],93,[3,0,0.9990302469546422,0,0.04402914568495296]],[4,["_euler"],93,[1,0,174.953,0]],[35,["_materials","0"],94,238],[15,1,["_shadowCastingMode"],94],[15,5,["_shadowBias"],94],[15,5,["_shadowNormalBias"],94]]],237]],[120,"Light","c0y6F5f+pAvI805TdmxIjx",14,[[191,true,4886,90000,true,-647,[4,4293982975],[192,true]]],[1,-6.585,62.99,-8.227],[3,-0.3911481457062108,0.7205198140238408,0.5714935012513713,0.035348320145255296],[1,-87.256,144.239,-31.551]],[129,"Camera","c9DMICJLFO5IeO07EPon7U",14,[-648],[1,-179.75,204.867,220.618],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638375,0.8811195706053617],[1,-35,-45,0]],[193,0,30,0,2000,1822425087,223],[130,"Camera",2,[-649],[1,0,0,1000]],[194,0,1073741824,540,2000,6,41943040,225,[4,4278190080]],[7,"ButtonPlants",33554432,12,[[26,-650]],[1,0,-5,0]],[7,"Container",33554432,6,[[3,-651,[5,0,0]]],[1,-584.892,165.397,0]],[7,"Container",33554432,13,[[3,-652,[5,0,0]]],[1,-600.207,243.866,0]],[7,"Container",33554432,7,[[3,-653,[5,0,0]]],[1,-549.092,165.397,0]],[27,"EffectGroup",33554432,2,[[26,-654]]],[1,["5dKoQA71ZEp76xT0c5g+wz"]],[1,["049j7gnZVdm5F/bgr6/701"]],[1,["78y6shdSFbrqfdRih7IyLX"]],[1,["13jiQkbclGKox916z0n0wn"]],[1,["13jiQkbclGKox916z0n0wn"]],[1,["13jiQkbclGKox916z0n0wn"]],[121,"GardenScene","6ajME7RxtMKLWtWifo/pjb",14,[[195,-655,239]]]],0,[0,-1,95,0,-2,96,0,-3,97,0,-4,98,0,-5,99,0,-6,100,0,-7,101,0,-8,102,0,-9,103,0,-10,104,0,-11,105,0,-12,106,0,-13,107,0,-14,108,0,-15,109,0,-16,110,0,-17,111,0,-18,112,0,-19,113,0,-20,114,0,-21,115,0,-22,116,0,-23,117,0,-24,118,0,-25,119,0,-26,120,0,-27,121,0,-28,122,0,-29,123,0,-30,124,0,-31,125,0,-32,126,0,0,2,0,24,226,0,0,2,0,0,2,0,25,224,0,0,2,0,-1,225,0,-2,12,0,-3,4,0,-4,70,0,-5,28,0,-6,19,0,-7,6,0,-8,8,0,-9,7,0,-10,3,0,-11,5,0,-12,13,0,-13,9,0,-14,11,0,-15,90,0,-16,231,0,0,3,0,0,3,0,-1,80,0,-2,162,0,-3,163,0,-4,81,0,-5,164,0,-6,35,0,-7,166,0,-8,167,0,-9,168,0,-10,169,0,-11,170,0,-12,82,0,-13,83,0,-14,171,0,-15,172,0,0,4,0,0,4,0,0,4,0,-1,130,0,-2,67,0,-3,25,0,-4,68,0,-5,26,0,-6,69,0,-7,18,0,0,5,0,0,5,0,-1,84,0,-2,173,0,-3,174,0,-4,85,0,-5,175,0,-6,86,0,-7,16,0,-8,180,0,-9,181,0,-10,182,0,-11,183,0,0,6,0,-1,20,0,-2,21,0,0,6,0,-1,71,0,-2,20,0,-3,21,0,-4,140,0,-5,141,0,-6,72,0,-7,142,0,-8,228,0,0,7,0,-1,22,0,-2,15,0,0,7,0,-1,75,0,-2,22,0,-3,15,0,-4,151,0,-5,152,0,-6,76,0,-7,153,0,-8,230,0,0,8,0,0,8,0,-1,77,0,-2,154,0,-3,155,0,-4,78,0,-5,156,0,-6,79,0,-7,158,0,-8,34,0,-9,160,0,-10,161,0,0,9,0,0,9,0,-1,87,0,-2,184,0,-3,185,0,-4,88,0,-5,186,0,-6,187,0,-7,188,0,-8,23,0,-9,191,0,-10,192,0,0,10,0,-1,197,0,-2,198,0,-3,199,0,-4,200,0,-5,201,0,-6,202,0,-7,203,0,-8,204,0,-9,205,0,-10,206,0,-11,207,0,-12,208,0,0,11,0,0,11,0,0,11,0,-1,193,0,-2,89,0,-3,36,0,-4,37,0,-5,38,0,0,12,0,0,12,0,0,12,0,-1,127,0,-2,66,0,-3,227,0,-4,17,0,-5,24,0,0,13,0,0,13,0,-1,73,0,-2,144,0,-3,145,0,-4,74,0,-5,146,0,-6,229,0,-1,95,0,-2,96,0,-3,97,0,-4,98,0,-5,99,0,-6,100,0,-7,101,0,-8,102,0,-9,103,0,-10,104,0,-11,105,0,-12,106,0,-13,107,0,-14,108,0,-15,109,0,-16,110,0,-17,111,0,-18,112,0,-19,113,0,-20,114,0,-21,115,0,-22,116,0,-23,117,0,-24,118,0,-25,119,0,-26,120,0,-27,121,0,-28,122,0,-29,123,0,-30,124,0,-31,125,0,-32,126,0,-33,209,0,-34,40,0,-35,210,0,-36,91,0,-37,211,0,-38,212,0,-39,213,0,-40,215,0,-41,217,0,-42,219,0,-43,221,0,-1,222,0,-2,223,0,4,14,0,-6,39,0,-7,43,0,-8,221,0,-9,238,0,0,15,0,0,15,0,0,15,0,-1,149,0,-2,150,0,0,16,0,0,16,0,0,16,0,-1,177,0,-2,178,0,-3,179,0,0,17,0,0,17,0,21,17,0,0,17,0,-1,128,0,0,18,0,0,18,0,21,18,0,0,18,0,-1,133,0,0,19,0,0,19,0,-1,31,0,-2,32,0,-3,33,0,0,20,0,0,20,0,0,20,0,-1,138,0,0,21,0,0,21,0,0,21,0,-1,139,0,0,22,0,0,22,0,0,22,0,-1,148,0,0,23,0,0,23,0,0,23,0,-1,189,0,-2,190,0,0,24,0,0,24,0,0,24,0,-1,129,0,0,25,0,0,25,0,0,25,0,-1,131,0,0,26,0,0,26,0,0,26,0,-1,132,0,0,27,0,0,27,0,0,27,0,-1,134,0,0,28,0,0,28,0,-1,29,0,-2,30,0,0,29,0,0,29,0,0,29,0,-1,135,0,0,30,0,0,30,0,0,30,0,-1,136,0,0,31,0,0,31,0,0,31,0,-1,137,0,0,32,0,0,32,0,0,32,0,-1,143,0,0,33,0,0,33,0,0,33,0,-1,147,0,0,34,0,0,34,0,0,34,0,-1,159,0,0,35,0,0,35,0,0,35,0,-1,165,0,0,36,0,0,36,0,0,36,0,-1,194,0,0,37,0,0,37,0,0,37,0,-1,195,0,0,38,0,0,38,0,0,38,0,-1,196,0,-1,209,0,-2,40,0,-3,91,0,-4,212,0,10,233,0,10,233,0,-1,210,0,2,40,0,-1,213,0,-2,215,0,-3,217,0,-4,219,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,-1,157,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,-1,176,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,10,234,0,10,234,0,-1,211,0,2,91,0,2,95,0,2,96,0,2,97,0,2,98,0,2,99,0,2,100,0,2,101,0,2,102,0,2,103,0,2,104,0,2,105,0,2,106,0,2,107,0,2,108,0,2,109,0,2,110,0,2,111,0,2,112,0,2,113,0,2,114,0,2,115,0,2,116,0,2,117,0,2,118,0,2,119,0,2,120,0,2,121,0,2,122,0,2,123,0,2,124,0,2,125,0,2,126,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,0,161,0,0,162,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,0,167,0,0,168,0,0,168,0,0,169,0,0,169,0,0,170,0,0,170,0,0,171,0,0,171,0,0,172,0,0,172,0,0,173,0,0,173,0,0,174,0,0,174,0,0,175,0,0,175,0,0,176,0,0,176,0,0,177,0,0,177,0,0,178,0,0,178,0,0,179,0,0,179,0,0,180,0,0,180,0,0,181,0,0,181,0,0,182,0,0,182,0,0,183,0,0,183,0,0,184,0,0,184,0,0,185,0,0,185,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,195,0,0,195,0,0,196,0,0,196,0,0,197,0,0,197,0,0,198,0,0,198,0,0,199,0,0,199,0,0,200,0,0,200,0,0,201,0,0,201,0,0,202,0,0,202,0,0,203,0,0,203,0,0,204,0,0,204,0,0,205,0,0,205,0,0,206,0,0,206,0,0,207,0,0,207,0,0,208,0,0,208,0,2,209,0,10,232,0,10,232,0,2,210,0,2,211,0,2,212,0,10,214,0,10,214,0,10,235,0,10,235,0,10,214,0,2,213,0,10,216,0,10,216,0,10,216,0,2,215,0,10,218,0,10,218,0,10,236,0,10,236,0,10,218,0,2,217,0,10,220,0,10,220,0,10,237,0,10,237,0,10,220,0,2,219,0,2,221,0,0,222,0,-1,224,0,-1,226,0,0,227,0,0,228,0,0,229,0,0,230,0,0,231,0,0,238,0,26,14,1,4,14,2,4,14,10,4,90,27,4,70,655],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,7,1,1,7,8,7,1,13,20,1,1,7,8,1,7,1,7,8,1,7,1,7,1,1,7,13,1,1,7,1,1,7,1,1,7,1,1,1,1,1,7,1,1,7,1,1,1,7,8,13,20,7,1,1,1,1,1,1,7,8,13,20,27,7,1,1,1,1,1,7,1,1,1,7,1,1,1,7,8,13,20,7,1,1,1,1,7,8,1,1,8,8,1,7,1,8,1,1,1,1,7,8,8,1,7,1,1,8,1,8,1,7,1,7,8,1,13,1,1,1,1,7,8,1,1,8,1,8,1,7,8,8,1,8,1,1,1,1,7,8,1,1,8,8,22,23,1,7,8,8,22,23,13,1,1,7,8,1,7,8,1,7,8,1,7,1,1,1,8,8,8,1,1,1,1,1,1,5,12,5,5,12,5,5,-1,14,12,12,5,-1,14,5,12,12,5,12,12,5,12,12,5,12,12,5,12,28,29,30],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,5,5,33,4,4,1,20,20,8,1,6,5,5,1,34,34,35,35,1,36,36,21,21,33,4,4,8,77,4,4,78,4,4,79,4,4,80,9,6,37,12,12,38,12,12,11,13,5,5,1,8,1,9,81,9,6,11,13,5,5,1,8,1,82,9,20,9,6,37,12,12,38,21,12,12,11,13,5,5,1,8,1,9,6,11,13,5,5,1,39,9,1,1,4,4,10,1,6,11,13,5,5,1,1,4,4,83,84,1,6,1,14,14,40,40,1,10,8,6,11,13,5,5,1,39,9,1,10,1,4,4,1,1,85,1,6,11,13,5,5,1,9,22,1,1,1,8,4,4,1,1,1,8,8,6,5,5,1,41,41,1,42,42,1,43,43,6,6,6,1,1,1,10,31,86,14,14,14,87,2,88,89,2,90,91,44,44,2,2,92,45,45,16,46,22,16,47,93,16,48,94,16,49,95,96,2,97,98,99]],[[[196,"font_outlined",72,{"commonHeight":72,"fontSize":72,"atlasName":"font_outlined.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":0,"xAdvance":18,"rect":{"x":0,"y":0,"width":0,"height":0}},"33":{"xOffset":-2,"yOffset":12,"xAdvance":21,"rect":{"x":479,"y":145,"width":25,"height":62}},"34":{"xOffset":-4,"yOffset":11,"xAdvance":29,"rect":{"x":485,"y":392,"width":36,"height":30}},"35":{"xOffset":-3,"yOffset":11,"xAdvance":52,"rect":{"x":405,"y":0,"width":57,"height":66}},"36":{"xOffset":-3,"yOffset":13,"xAdvance":35,"rect":{"x":463,"y":0,"width":42,"height":66}},"37":{"xOffset":-5,"yOffset":16,"xAdvance":58,"rect":{"x":308,"y":272,"width":68,"height":59}},"38":{"xOffset":-4,"yOffset":11,"xAdvance":51,"rect":{"x":48,"y":145,"width":58,"height":63}},"39":{"xOffset":-3,"yOffset":11,"xAdvance":17,"rect":{"x":419,"y":449,"width":23,"height":33}},"40":{"xOffset":-3,"yOffset":10,"xAdvance":29,"rect":{"x":0,"y":0,"width":37,"height":78}},"41":{"xOffset":-5,"yOffset":10,"xAdvance":29,"rect":{"x":38,"y":0,"width":36,"height":78}},"42":{"xOffset":-5,"yOffset":12,"xAdvance":31,"rect":{"x":258,"y":449,"width":40,"height":40}},"43":{"xOffset":-5,"yOffset":24,"xAdvance":35,"rect":{"x":214,"y":449,"width":43,"height":44}},"44":{"xOffset":-6,"yOffset":48,"xAdvance":21,"rect":{"x":388,"y":449,"width":30,"height":34}},"45":{"xOffset":-3,"yOffset":33,"xAdvance":31,"rect":{"x":0,"y":496,"width":37,"height":25}},"46":{"xOffset":-4,"yOffset":45,"xAdvance":21,"rect":{"x":443,"y":449,"width":28,"height":29}},"47":{"xOffset":-5,"yOffset":11,"xAdvance":24,"rect":{"x":348,"y":0,"width":34,"height":67}},"48":{"xOffset":-4,"yOffset":18,"xAdvance":46,"rect":{"x":291,"y":333,"width":54,"height":56}},"49":{"xOffset":-6,"yOffset":17,"xAdvance":24,"rect":{"x":346,"y":333,"width":31,"height":56}},"50":{"xOffset":-5,"yOffset":18,"xAdvance":38,"rect":{"x":378,"y":333,"width":48,"height":56}},"51":{"xOffset":-5,"yOffset":18,"xAdvance":36,"rect":{"x":427,"y":333,"width":45,"height":56}},"52":{"xOffset":-5,"yOffset":17,"xAdvance":40,"rect":{"x":0,"y":392,"width":49,"height":56}},"53":{"xOffset":-5,"yOffset":18,"xAdvance":37,"rect":{"x":473,"y":333,"width":46,"height":56}},"54":{"xOffset":-4,"yOffset":17,"xAdvance":40,"rect":{"x":0,"y":334,"width":49,"height":57}},"55":{"xOffset":-6,"yOffset":17,"xAdvance":35,"rect":{"x":50,"y":334,"width":45,"height":57}},"56":{"xOffset":-5,"yOffset":17,"xAdvance":36,"rect":{"x":96,"y":334,"width":45,"height":57}},"57":{"xOffset":-4,"yOffset":17,"xAdvance":41,"rect":{"x":142,"y":334,"width":49,"height":57}},"58":{"xOffset":-4,"yOffset":30,"xAdvance":18,"rect":{"x":187,"y":449,"width":26,"height":44}},"59":{"xOffset":-8,"yOffset":30,"xAdvance":18,"rect":{"x":50,"y":392,"width":30,"height":52}},"61":{"xOffset":-3,"yOffset":28,"xAdvance":35,"rect":{"x":346,"y":449,"width":41,"height":35}},"63":{"xOffset":-5,"yOffset":11,"xAdvance":31,"rect":{"x":481,"y":79,"width":40,"height":63}},"64":{"xOffset":-4,"yOffset":10,"xAdvance":50,"rect":{"x":138,"y":79,"width":56,"height":64}},"65":{"xOffset":-6,"yOffset":11,"xAdvance":50,"rect":{"x":208,"y":145,"width":62,"height":62}},"66":{"xOffset":-3,"yOffset":12,"xAdvance":47,"rect":{"x":189,"y":209,"width":54,"height":61}},"67":{"xOffset":-4,"yOffset":11,"xAdvance":45,"rect":{"x":299,"y":79,"width":54,"height":63}},"68":{"xOffset":-3,"yOffset":12,"xAdvance":52,"rect":{"x":244,"y":209,"width":58,"height":61}},"69":{"xOffset":-3,"yOffset":12,"xAdvance":41,"rect":{"x":271,"y":145,"width":48,"height":62}},"70":{"xOffset":-3,"yOffset":11,"xAdvance":41,"rect":{"x":320,"y":145,"width":49,"height":62}},"71":{"xOffset":-4,"yOffset":11,"xAdvance":52,"rect":{"x":354,"y":79,"width":60,"height":63}},"72":{"xOffset":-3,"yOffset":12,"xAdvance":54,"rect":{"x":303,"y":209,"width":59,"height":61}},"73":{"xOffset":-3,"yOffset":12,"xAdvance":22,"rect":{"x":363,"y":209,"width":27,"height":61}},"74":{"xOffset":-6,"yOffset":12,"xAdvance":25,"rect":{"x":314,"y":0,"width":33,"height":70}},"75":{"xOffset":-3,"yOffset":12,"xAdvance":48,"rect":{"x":391,"y":209,"width":56,"height":61}},"76":{"xOffset":-3,"yOffset":12,"xAdvance":40,"rect":{"x":370,"y":145,"width":48,"height":62}},"77":{"xOffset":-3,"yOffset":11,"xAdvance":59,"rect":{"x":415,"y":79,"width":65,"height":63}},"78":{"xOffset":-3,"yOffset":11,"xAdvance":54,"rect":{"x":419,"y":145,"width":59,"height":62}},"79":{"xOffset":-4,"yOffset":10,"xAdvance":55,"rect":{"x":75,"y":79,"width":62,"height":64}},"80":{"xOffset":-3,"yOffset":12,"xAdvance":47,"rect":{"x":448,"y":209,"width":54,"height":61}},"81":{"xOffset":-4,"yOffset":10,"xAdvance":55,"rect":{"x":220,"y":0,"width":62,"height":72}},"82":{"xOffset":-3,"yOffset":11,"xAdvance":46,"rect":{"x":0,"y":209,"width":54,"height":62}},"83":{"xOffset":-4,"yOffset":10,"xAdvance":30,"rect":{"x":0,"y":79,"width":37,"height":65}},"84":{"xOffset":-6,"yOffset":11,"xAdvance":39,"rect":{"x":55,"y":209,"width":49,"height":62}},"85":{"xOffset":-3,"yOffset":12,"xAdvance":49,"rect":{"x":105,"y":209,"width":55,"height":62}},"86":{"xOffset":-4,"yOffset":12,"xAdvance":48,"rect":{"x":0,"y":272,"width":55,"height":61}},"87":{"xOffset":-4,"yOffset":12,"xAdvance":68,"rect":{"x":56,"y":272,"width":76,"height":61}},"88":{"xOffset":-4,"yOffset":12,"xAdvance":45,"rect":{"x":133,"y":272,"width":52,"height":61}},"89":{"xOffset":-5,"yOffset":12,"xAdvance":45,"rect":{"x":186,"y":272,"width":55,"height":61}},"90":{"xOffset":-4,"yOffset":11,"xAdvance":39,"rect":{"x":0,"y":145,"width":47,"height":63}},"91":{"xOffset":-1,"yOffset":11,"xAdvance":30,"rect":{"x":148,"y":0,"width":35,"height":76}},"93":{"xOffset":-3,"yOffset":11,"xAdvance":30,"rect":{"x":184,"y":0,"width":35,"height":76}},"94":{"xOffset":-4,"yOffset":15,"xAdvance":38,"rect":{"x":299,"y":449,"width":46,"height":38}},"95":{"xOffset":-7,"yOffset":66,"xAdvance":34,"rect":{"x":38,"y":496,"width":47,"height":22}},"97":{"xOffset":-4,"yOffset":26,"xAdvance":43,"rect":{"x":164,"y":392,"width":50,"height":48}},"98":{"xOffset":-4,"yOffset":10,"xAdvance":43,"rect":{"x":195,"y":79,"width":51,"height":63}},"99":{"xOffset":-5,"yOffset":25,"xAdvance":30,"rect":{"x":481,"y":272,"width":40,"height":49}},"100":{"xOffset":-5,"yOffset":10,"xAdvance":43,"rect":{"x":247,"y":79,"width":51,"height":63}},"101":{"xOffset":-5,"yOffset":25,"xAdvance":37,"rect":{"x":117,"y":392,"width":46,"height":49}},"102":{"xOffset":-5,"yOffset":9,"xAdvance":26,"rect":{"x":38,"y":79,"width":36,"height":64}},"103":{"xOffset":-5,"yOffset":26,"xAdvance":42,"rect":{"x":192,"y":334,"width":49,"height":57}},"104":{"xOffset":-4,"yOffset":11,"xAdvance":41,"rect":{"x":107,"y":145,"width":48,"height":62}},"105":{"xOffset":-3,"yOffset":13,"xAdvance":20,"rect":{"x":242,"y":272,"width":26,"height":60}},"106":{"xOffset":-7,"yOffset":12,"xAdvance":21,"rect":{"x":283,"y":0,"width":30,"height":70}},"107":{"xOffset":-3,"yOffset":11,"xAdvance":44,"rect":{"x":156,"y":145,"width":51,"height":62}},"108":{"xOffset":-4,"yOffset":12,"xAdvance":20,"rect":{"x":161,"y":209,"width":27,"height":61}},"109":{"xOffset":-3,"yOffset":26,"xAdvance":63,"rect":{"x":264,"y":392,"width":68,"height":47}},"110":{"xOffset":-4,"yOffset":26,"xAdvance":41,"rect":{"x":333,"y":392,"width":48,"height":47}},"111":{"xOffset":-5,"yOffset":26,"xAdvance":39,"rect":{"x":215,"y":392,"width":48,"height":48}},"112":{"xOffset":-3,"yOffset":26,"xAdvance":44,"rect":{"x":377,"y":272,"width":51,"height":58}},"113":{"xOffset":-5,"yOffset":26,"xAdvance":43,"rect":{"x":429,"y":272,"width":51,"height":58}},"114":{"xOffset":-4,"yOffset":26,"xAdvance":28,"rect":{"x":382,"y":392,"width":37,"height":47}},"115":{"xOffset":-5,"yOffset":24,"xAdvance":26,"rect":{"x":81,"y":392,"width":35,"height":50}},"116":{"xOffset":-5,"yOffset":15,"xAdvance":28,"rect":{"x":269,"y":272,"width":38,"height":59}},"117":{"xOffset":-3,"yOffset":28,"xAdvance":42,"rect":{"x":44,"y":449,"width":48,"height":45}},"118":{"xOffset":-4,"yOffset":28,"xAdvance":39,"rect":{"x":93,"y":449,"width":47,"height":45}},"119":{"xOffset":-5,"yOffset":27,"xAdvance":55,"rect":{"x":420,"y":392,"width":64,"height":46}},"120":{"xOffset":-5,"yOffset":28,"xAdvance":36,"rect":{"x":141,"y":449,"width":45,"height":45}},"121":{"xOffset":-4,"yOffset":28,"xAdvance":39,"rect":{"x":242,"y":333,"width":48,"height":57}},"122":{"xOffset":-4,"yOffset":27,"xAdvance":34,"rect":{"x":0,"y":449,"width":43,"height":46}},"123":{"xOffset":-4,"yOffset":10,"xAdvance":29,"rect":{"x":75,"y":0,"width":36,"height":78}},"124":{"xOffset":1,"yOffset":11,"xAdvance":23,"rect":{"x":383,"y":0,"width":21,"height":67}},"125":{"xOffset":-3,"yOffset":10,"xAdvance":29,"rect":{"x":112,"y":0,"width":35,"height":78}}},"kerningDict":{}}]],0,0,[0],[31],[100]],[[[20,"Ranch"],[40,"Ranch",[-3,-4],[[197,-2,[2,"e8kwWA5whP66fh9uQktgCo"],[6,7,8,9],10,11]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[132,"RenderRoot2D",33554432,1,[[-7,[122,"EffectGroup",33554432,-8,[0,"f06F/gte9GN661XLKp3sRT",1,0]]],1,4],[[39,-5,[2,"6e3YRaOgxOpI/jF0GYqOB+"]],[89,-6,[2,"fbtQR2n7NLGJTpn7EzN1t7"]]],[0,"47AEL8vM5BZa8owvOwX8RE",1,0]],[93,"StatusNode",false,33554432,2,[-11],[[39,-9,[2,"e0p4cn7GxFOYbx0Zs+GNpX"]],[88,true,-10,[2,"f9o0+PJxhIyYPZrVr7y0u0"],[4],5]],[0,"8b/CewvytC+ZaiwINSjUIU",1,0]],[94,"ico_event",33554432,3,[-14],[[50,-12,[2,"4aYrVZudVDWqa2hsia2SNG"],[5,134,164],[0,0.5,0]],[34,-13,[2,"f2U+MgZi9LKoS7sUZbVi/r"],3]],[0,"21vn0yNaNH0KP5vylz5+kl",1,0],[1,0.7,0.7,0.7]],[55,"Icon",33554432,4,[[32,-15,[2,"bflTvTKXxAFJG0UyEMssLj"],[5,150,128]],[34,-16,[2,"18cjSOyxBAVpHoVbtzNzOq"],2]],[0,"9cJngYdTNCra1MqOFOdBDl",1,0],[1,0,96.029,0],[1,0.6,0.6,1.0000000000000002]],[49,"Plane",1,[[139,"Plane<ModelComponent>",-17,[2,"41c5lpHGJAi4X0AbVHkGDw"],[0],[14],1]],[0,"13jiQkbclGKox916z0n0wn",1,0],[1,0,-1,0]]],0,[0,2,1,0,0,1,0,-1,6,0,-2,2,0,0,2,0,0,2,0,-1,3,0,4,2,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,-1,5,0,0,5,0,0,5,0,0,6,0,9,1,17],[0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,1,1,-1,14,-1,-2,-3,-4,13,32],[2,101,22,50,17,17,46,47,48,49,8,102]],[[[20,"Tomato_1"],[29,"Tomato_1",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[47,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,103]],[[[20,"Carrot_3"],[29,"Carrot_3",[-2,-3,-4],[136,"8a478nDfZdfZlePO9DkB6i",[],-1,0],[1,0,0.1,0]],[37,"Sphere002",1,[[17,-5,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,1.15,0,-0.134],[1,4,4,4]],[36,"Sphere003",1,[[17,-6,[2,"12BUuOyWFHk5Qe9E5FSxBk"],[2],[14],3]],[0,"32fOx5dxJO2Yiw/iRBZ+0R",1,0],[1,-1.293,0.446,-1.026],[3,0,0.32179477420771285,0,0.9468094440237735],[1,4,4,4],[1,0,37.543,0]],[36,"Sphere004",1,[[17,-7,[2,"dev2LgVABBCYDHWOdiwkwV"],[4],[14],5]],[0,"2dwobyvk9PRaChsDD/t5yA",1,0],[1,-1.2,0.446,0.919],[3,0,0.6867513876391996,0,0.7268923796378896],[1,4,4,4],[1,0,86.747,0]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,23,2,23,2,23]],[[[20,"Grape_1"],[29,"Grape_1",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[47,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,104]],[[[23,".bin",2855548922,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":51504,"length":4356,"count":1089,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":51504,"count":1073,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7575214505195618,-0.00511114951223135,-0.4603376090526581],"maxPosition",8,[1,0.7605418562889099,2.1895108222961426,0.6400851607322693]]],-1],0,0,[],[],[]],[[[23,".bin",1999335679,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":55488,"length":4872,"count":1218,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":55488,"count":1156,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5877493619918823,-0.926876962184906,-0.8041599988937378],"maxPosition",8,[1,0.7674059271812439,0.9820997714996338,0.7178273797035217]]],-1],0,0,[],[],[]],[[[20,"animal_0"],[40,"animal_0",[-3,-4],[[82,-2,[2,"86M11R0PxRM4vJ1Drfk534"],[4,5],6]],[0,"c4vk415PFX4Yi9/+2FqzMX",-1,0]],[29,"Body",[-5,-6,-7,-8,-9,-10,-11],[0,"0fQY2FcopXwLigbeSmGelh",1,0],[1,0.0000537765008630231,0.022865893319249153,0.0001363167684758082]],[66,"root",[-12,2,-13,-14,-15],[0,"3bk7FIHv9W+6fSFRQr0pxA",1,0],[3,0.7071068407911908,0,0,0.7071067215818992],[1,90.00000965934633,0,0]],[67,"Armature",1,[3],[0,"31y5NeIo9bz7YazYJATlsR",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[12,"FrontFoot.R",3,[[11,"FrontFoot.R_end",-16,[0,"bfvIWaehJfKZvOfHxr5/hX",1,0],[1,-2.2204459996194763e-18,0.009999999776482582,1.3877787497621727e-19]]],[0,"6eGPBC2J1RqrJ6jzBad5SV",1,0],[1,-0.012202508747577667,0.0010000348556786776,0.01927023008465767],[3,0.7071068407908391,-7.052582993953335e-7,-7.052581857084939e-7,0.7071067215815475],[1,90.00000965934633,4.222240816162296e-13,-0.0001142919905172986]],[8,"FrontLeg.R",2,[-17],[0,"e4p+MrB91Zfa5MRoiZNncU",1,0],[1,-0.004269574768841267,-0.000795309548266232,0.01873094029724598],[3,-0.002626553724746887,0.002626346039806323,0.7071019629827959,0.7071018437735027],[1,-90.00130868452192,90.00129185601334,89.57436459831172]],[8,"FrontUpLeg.R",6,[-18],[0,"0aYj+8hvNYS7uLISzUsEMP",1,0],[1,5.039491046687772e-10,0.008122732862830162,-5.508172806756306e-10],[3,0.7077022123961062,-0.7007208396327973,-0.049289088202437555,0.07562056108054376],[1,99.78124424992761,-70.08242650924606,-87.79254622146254]],[12,"FrontLowLeg.R",7,[[11,"FrontLowLeg.R_end",-19,[0,"c4Uap98nhWq4oOkxrzhoBP",1,0],[1,0,0.00775875011458993,2.2204459996194763e-18]]],[0,"13tMyeS1JVnrMQXDVaLooR",1,0],[1,7.450580430390374e-11,0.013847215101122856,2.94297941572097e-9],[3,0.22962984167916808,-0.018475183996006037,0.004359758872520388,0.9730929019827897],[1,26.555432360062216,-2.175378857743942,-3.6242906981601434e-7]],[8,"BackLeg.R",2,[-20],[0,"84yHMNflNVdJeD4PquI9rv",1,0],[1,-0.004269574768841267,0.000500023365020752,-0.026103053241968155],[3,0.009674674058884796,-0.009675205844083634,0.7070406195401848,0.707040559935539],[1,90.00015494488765,-90.0001980386617,88.43205994202604]],[8,"BackUpLeg.R",9,[-21],[0,"ccDLY5NF1RcLl5vIninFn2",1,0],[1,-8.25720158914578e-10,0.006330168340355158,1.1610342687262687e-9],[3,-0.68285064152525,0.69677917377138,-0.13889586572224363,0.17006387874059534],[1,-53.298047431906234,101.45639533242752,-87.23352682389415]],[12,"BackLowLeg.R",10,[[11,"BackLowLeg.R_end",-22,[0,"26mQPFXa1QHbIFloTsdsUW",1,0],[1,-2.2204459996194763e-18,0.009370130486786366,-4.440891999238953e-18]]],[0,"d0KXIUmSRe87aIhFZg+LXO",1,0],[1,2.7939680083410856e-11,0.014889427460730076,-5.587935447692871e-9],[3,-0.3504077745177412,0.018124229962963857,0.006782150270737208,0.9363973015144152],[1,-41.032546532043696,2.217670963562338,-0.00000961127377546852]],[8,"FrontLeg.L",2,[-23],[0,"aaMgLpbmRQNqH245i6hjfh",1,0],[1,0.0036532492376863956,-0.000795309548266232,0.01873094029724598],[3,0.7071024039694828,0.7071025231787699,-0.0024711372773669614,0.002470930058098205],[1,89.99862634439606,90.00139044636622,89.59955103764257]],[8,"FrontUpLeg.L",12,[-24],[0,"2fo+inIwZT8pjE+3wZm7RB",1,0],[1,2.644426899678365e-10,0.008122734725475311,-7.52725659580733e-10],[3,-0.02583532208881628,-0.09908143382113105,0.7089457476959412,0.6977903212486962],[1,93.58513783100715,-103.73413368851504,83.99379184091082]],[12,"FrontLowLeg.L",13,[[11,"FrontLowLeg.L_end",-25,[0,"e6Jfi09ItXb4d6ivH9ilYf",1,0],[1,0,0.00775875011458993,0]]],[0,"c41arLnUlXe7i+AX0nsLZz",1,0],[1,-2.60770322002557e-10,0.01384721603244543,4.172325152040912e-9],[3,0.22935618360327673,0.05088980473774733,-0.012008825264744508,0.971937115729436],[1,26.55532961486697,5.994441306155325,0.000007838962309451546]],[8,"BackLeg.L",2,[-26],[0,"65D7EOrXhc2L4V4K+FH/DH",1,0],[1,0.0036532492376863956,0.000500023365020752,-0.026103053241968155],[3,0.7070432849012058,0.7070433445058502,0.00947344109849652,-0.009473973815005254],[1,-89.99979817480195,-90.00015865612107,88.46467405363576]],[8,"BackUpLeg.L",15,[-27],[0,"05HYD744xXB7uSUKYXBiC6",1,0],[1,3.629850864328432e-9,0.0063301692716777325,-9.270575973552297e-10],[3,0.14581188407120652,0.16338796742840697,0.6814084577861013,0.6983736680465451],[1,-33.38226338967248,58.64411132034426,88.02052174028046]],[12,"BackLowLeg.L",16,[[11,"BackLowLeg.L_end",-28,[0,"d5tLsfvTtaf7kJlGej9MkS",1,0],[1,0,0.009370130486786366,4.440891999238953e-18]]],[0,"05r4fATC5dBIKO2aN1cLkl",1,0],[1,2.98023217215615e-10,0.014889421872794628,-1.6018748549839756e-9],[3,-0.3504568944604175,-0.008899991426350643,-0.0033305306084184865,0.9365306523780401],[1,-41.032462974424355,-1.088951471515277,-0.000009241518632200168]],[12,"Back",2,[[11,"Back_end",-29,[0,"16TAw99YlVB7DF2pxvWXiS",1,0],[1,1.3877787497621727e-19,0.009700956754386425,0]]],[0,"a9+nVcL6xU07aQOvoFaq10",1,0],[1,-0.00032282702159136534,0.00543849216774106,-0.03082328476011753],[3,0.6013810784421046,0.01280548548560241,0.0019118771200423712,0.7988574107806519],[1,73.93537399778333,1.0407247311152548,1.0575446296570528]],[8,"Shoulders",2,[-30],[0,"6e0JRFEe1TeY6ggAQV1jlq",1,0],[1,-0.0007365463534370065,0.0021116279531270266,0.007024262100458145],[3,0.009116792300720765,0.7548107058390505,0.6555643211588165,-0.020324942127349012],[1,-81.9338527721709,-177.55617875845968,-0.7383171696271522]],[8,"Neck",19,[-31],[0,"26r05lVOdavrh3rrCrTlsI",1,0],[1,5.587935322792781e-11,0.01023773942142725,9.901123254607569e-10],[3,0.06568982530301817,-0.010677165478828575,-0.019551655510205372,0.9975913881724355],[1,7.5130789369976725,-1.074331509022261,-2.3160613517828006]],[12,"Head",20,[[11,"Head_end",-32,[0,"b9yTX971haf6FBRNyW/1Y6",1,0],[1,0,0.016001464799046516,4.440891999238953e-18]]],[0,"7enRWHSvlUW55kpXtRw629",1,0],[1,-1.374246463153872e-11,0.01546743605285883,-7.917883015906568e-10],[3,-0.3912635084935673,-0.23469923060920597,0.08755992957849183,0.8855294443466917],[1,-43.852722466307604,-21.651494074236194,19.79965655638713]],[8,"Hips",2,[-33],[0,"dbyWueyE1YorW3e955uqOC",1,0],[1,-0.00032282702159136534,0.008262631483376026,-0.021542511880397797],[3,0.0000036929936965009404,0.6548693197189831,0.7557421346377732,0.0000032093501060601146],[1,-98.18051634496828,-179.99992101822417,0.000555066542802596]],[12,"Torso",22,[[11,"Torso_end",-34,[0,"68CbxLQdxW2I6JX8FULj+9",1,0],[1,-2.081668124643259e-19,0.015270233154296875,0]]],[0,"0fE6Odj1NcWriRUibjKg+l",1,0],[1,3.676632349264297e-12,0.017321430146694183,-1.7496742943379218e-9],[3,0.10717273693362754,0.0014853627916875047,-0.01346725528698138,0.9941480931886193],[1,12.310286342992873,0.33472565925775755,-1.5161379744604435]],[12,"BackFoot.R",3,[[11,"BackFoot.R_end",-35,[0,"4aOWxxSLpTMatIN2mfNU+z",1,0],[1,-2.2204459996194763e-18,0.006745369639247656,1.3877787497621727e-19]]],[0,"d0U2i3uKNVJqnAuo5TeXAT",1,0],[1,-0.01117923017591238,0.0010000348556786776,-0.030364982783794403],[3,0.7071068407907499,-7.89552088787537e-7,-7.895519751006974e-7,0.7071067215814584],[1,90.00000965934632,1.5737091652577643e-12,-0.00012795238382659827]],[12,"FrontFoot.L",3,[[11,"FrontFoot.L_end",-36,[0,"32Qv1VeHla8YlfVBERQork",1,0],[1,-2.2204459996194763e-18,0.009999999776482582,1.3877787497621727e-19]]],[0,"d4F0TZqhRdNqi13VpqMmng",1,0],[1,0.011693737469613552,0.0010000348556786776,0.01927023008465767],[3,0.7071068407904224,-0.0000010424331727468324,-0.0000010424330590599927,0.7071067215811309],[1,90.00000965934633,5.0281604972794496e-12,-0.0001689335176951215]],[12,"BackFoot.L",3,[[11,"BackFoot.L_end",-37,[0,"58cb/fgSdQPIckaCG5vjUZ",1,0],[1,0,0.006745369639247656,0]]],[0,"5awspJ6fRY+rbK9y/T0xqO",1,0],[1,0.010670462623238564,0.0010000348556786776,-0.030364982783794403],[3,0.7071068407902931,-0.0000011267269621388797,-0.0000011267267347652002,0.7071067215810014],[1,90.0000096593463,-3.0322257095313997e-12,-0.00018259390179253452]],[43,"Pig",1,[[68,-38,[2,"f2VoOSITtT24+SBPYJ39Ru"],[0,1],[14],1,2,3]],[0,"4a7A2OcWxQtKiPBFQm6ri/",1,0],[3,-0.7071068407911909,0,0,0.7071067215818991],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,2,1,0,0,1,0,-1,4,0,-2,27,0,-1,6,0,-2,9,0,-3,12,0,-4,15,0,-5,18,0,-6,19,0,-7,22,0,-1,5,0,-3,24,0,-4,25,0,-5,26,0,4,5,0,-1,7,0,-1,8,0,4,8,0,-1,10,0,-1,11,0,4,11,0,-1,13,0,-1,14,0,4,14,0,-1,16,0,-1,17,0,4,17,0,4,18,0,-1,20,0,-1,21,0,4,21,0,-1,23,0,4,23,0,4,24,0,4,25,0,4,26,0,0,27,0,9,1,2,4,3,3,4,4,38],[0,0,0,0,0,0,0],[-1,-2,6,16,-1,-2,14],[105,106,107,108,51,109,51]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[17],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[23,".bin",2328965288,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":82176,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":82176,"count":1712,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7575214505195618,-0.00511114951223135,-0.4603376090526581],"maxPosition",8,[1,0.7605418562889099,2.1895108222961426,0.6400851607322693]]],-1],0,0,[],[],[]],[[[20,"animal_1"],[40,"animal_1",[-3,-4],[[82,-2,[2,"61/GCmGrReIrR0eym1NaFf"],[4,5],6]],[0,"82GNMKXo1T0Y1rFdvsRGPM",-1,0]],[29,"Body",[-5,-6,-7,-8,-9,-10,-11],[0,"d1A4I8AUdT0YRr5gKoBWe/",1,0],[1,0.0000537765008630231,0.023020822554826736,-0.00017354160081595182]],[66,"root",[-12,2,-13,-14,-15],[0,"02SvaUKdteJLXZ66B2b2FP",1,0],[3,0.7071068407911908,0,0,0.7071067215818992],[1,90.00000965934633,0,0]],[67,"Armature",1,[3],[0,"a52TLuzUhVA6ik6B5NVrOM",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[12,"FrontFoot.R",3,[[11,"FrontFoot.R_end",-16,[0,"2aUFlTscNZwZAevCnSPV8y",1,0],[1,0,0.009999999776482582,1.3877787497621727e-19]]],[0,"070i/BvXZdYbRneCbJxSwL",1,0],[1,-0.009117710404098034,0.0010000348556786776,0.011625418439507484],[3,0.7071068407908391,-7.052582993953335e-7,-7.052581857084939e-7,0.7071067215815475],[1,90.00000965934633,4.222240816162296e-13,-0.0001142919905172986]],[8,"FrontLeg.R",2,[-17],[0,"c57Wofwz1VhZrW/jUfK7CL",1,0],[1,-0.0032468067947775126,0.0007351660751737654,0.011086128652095795],[3,0.001759224685003861,-0.001759504431021782,0.7071046222328422,0.7071045626281975],[1,90.00095921400722,-90.0009818814695,89.71488247460297]],[8,"FrontUpLeg.R",6,[-18],[0,"5d40lYkc5Y+pMajMPkpFx5",1,0],[1,-1.169286445446005e-9,0.006025583017617464,-1.0463159227924734e-9],[3,0.7063969929174672,-0.7005700428776944,-0.05700322580377962,0.0833998541213886],[1,96.74942732227163,-71.85306452936813,-87.80949558096775]],[12,"FrontLowLeg.R",7,[[11,"FrontLowLeg.R_end",-19,[0,"4durxqbiNXALKYfFnhuGHP",1,0],[1,0,0.010788065381348133,0]]],[0,"9ee34HeJ9f4I+Jr69phZqg",1,0],[1,-8.940696516468449e-10,0.012328616343438625,-1.0058284205527457e-9],[3,0.17354831188320954,-0.01869456293314814,0.003295097749778646,0.9846423914752231],[1,19.992019289150353,-2.175392235297918,0.000009521417726256196]],[8,"BackLeg.R",2,[-20],[0,"5b1wUALBpWe7e3dvm+3Zlj",1,0],[1,-0.0032468067947775126,0.0007351660751737654,-0.012089414522051811],[3,0.0011415672713054855,-0.001142285437439962,0.7071058889239055,0.7071058293192596],[1,90.00146622576744,-90.00152441774468,89.81494283233243]],[8,"BackUpLeg.R",9,[-21],[0,"980jA5v/FXAoDOIWYZhHp/",1,0],[1,1.9162351705404035e-9,0.004695830401033163,4.313415180590141e-10],[3,-0.6694069546802774,0.6761872810893089,-0.2015373719482051,0.23248177912889348],[1,-59.76403896514078,84.481923642685,-87.43292265176157]],[12,"BackLowLeg.R",10,[[11,"BackLowLeg.R_end",-22,[0,"0e8Zkx6sxWor88muDlOEON",1,0],[1,-1.1102229998097382e-18,0.014139310456812382,2.2204459996194763e-18]]],[0,"a2iae7CjlVf49BU2vh66Mi",1,0],[1,-5.494802945982258e-10,0.010874387808144093,2.197921178392903e-9],[3,-0.3844085127350388,0.017864142029827695,0.0074402333109610105,0.922960243290388],[1,-45.22298682072363,2.217669092408485,-0.00001016680968784006]],[8,"FrontLeg.L",2,[-23],[0,"49TcaXY3tYx7JsEW3AXcCG",1,0],[1,0.002630481729283929,0.0007351660751737654,0.011086128652095795],[3,0.7071042882147346,0.7071043478193813,0.0018662580417783889,-0.0018665380206363013],[1,-89.99907376766035,-90.00090354600064,89.69753690076666]],[8,"FrontUpLeg.L",12,[-24],[0,"06nOfNLYlZ97oITm7fnYha",1,0],[1,1.820303019428593e-9,0.006025584880262613,2.9767932563373734e-10],[3,-0.03354005532296625,-0.10680354439814407,0.7078987991338975,0.6973860894638723],[1,92.46260546130135,-103.86886434449062,84.0000267138086]],[12,"FrontLowLeg.L",13,[[11,"FrontLowLeg.L_end",-25,[0,"acR6tKgllS+Idzo1L8R/SH",1,0],[1,-1.1102229998097382e-18,0.010788065381348133,0]]],[0,"31BoYbr6hQKqz0MRBjd5nD",1,0],[1,-9.126961408867373e-10,0.012328613549470901,2.2351742678949904e-10],[3,0.17334077882030413,0.05149381497771455,-0.009075931079523604,0.9834729222973306],[1,19.991859713453287,5.994442837345826,0.0000052175046496013526]],[8,"BackLeg.L",2,[-26],[0,"bc8r+ZQJ9T0px/xKS/SdR/",1,0],[1,0.002630481729283929,0.0007351660751737654,-0.012089414522051811],[3,0.7071060657659742,0.70710612537062,0.0009843286991510216,-0.0009850468652834953],[1,-89.99823680378105,-90.00170500426317,89.84042446255556]],[8,"BackUpLeg.L",15,[-27],[0,"4ex8UAAuheMq3W765aS1ha",1,0],[1,7.193722839637928e-10,0.004695831332355738,-4.113587803722396e-10],[3,0.20827126666144127,0.22595982430561568,0.667343502504073,0.6783936076855459],[1,-40.12341711255629,75.89024608267604,88.30997566191499]],[12,"BackLowLeg.L",16,[[11,"BackLowLeg.L_end",-28,[0,"7c8R++QsFUaZaJVZMJXr/y",1,0],[1,0,0.014139310456812382,-2.2204459996194763e-18]]],[0,"adobIJWF5Zw7y4gypp53yM",1,0],[1,9.499490083442197e-10,0.010874386876821518,5.671754621516811e-9],[3,-0.38446301706204034,-0.008772295078882275,-0.0036537223955848443,0.9230914828245673],[1,-45.22297058747652,-1.0889548889368428,-0.000011114393924774482]],[12,"Back",2,[[11,"Back_end",-29,[0,"c6m9jWnv1RVZ6/Zak8SBNY",1,0],[1,0,0.009700954891741276,0]]],[0,"88/AcAdSJYcKyJILKdrOCi",1,0],[1,-0.0003228271089028567,0.005012156907469034,-0.020330894738435745],[3,0.6012591021672216,0.022893471255302226,-0.005923485748654215,0.7987041338014566],[1,73.92174385120882,2.504649153423718,1.0352530304321572]],[8,"Shoulders",2,[-30],[0,"30e5bKhilT3omx8kIIF+qY",1,0],[1,-0.0006895044934935868,0.003097136039286852,0.010320519097149372],[3,0.006586595858524795,0.9146405991234157,0.40345903952012446,-0.024698069148300767],[1,-47.594305221915135,-177.10555420477104,-0.451528793819739]],[8,"Neck",19,[-31],[0,"b0IQOTnTJTz5PCcH71wv56",1,0],[1,-3.725290215195187e-11,0.009995866566896439,1.931330206872417e-9],[3,0.07927492803181278,-0.02114728784104056,-0.014362238911422593,0.9965249641107693],[1,9.0601911246174,-2.2861851106598774,-1.8324915484586781]],[12,"Head",20,[[11,"Head_end",-32,[0,"96OLJJldpRnajNlqrO5KpD",1,0],[1,0,0.013046626932919025,0]]],[0,"9bzWLUv2hchIGHeVPI5205",1,0],[1,-6.502887204412611e-12,0.009685486555099487,-3.4133518234114035e-9],[3,-0.6495658751193727,-0.1919835655666978,0.17329835880761985,0.7149644489534334],[1,-83.64317230978557,-3.263048642395457,29.816000613815135]],[8,"Hips",2,[-33],[0,"d6pAFkxtJdxapiusFehd1n",1,0],[1,-0.0003228271089028567,0.007836296223104,-0.011050121858716011],[3,0.000003487624764492713,0.6944211092559098,0.719568845209615,0.0000033658895813566903],[1,-92.03778993215424,-179.99998026259544,0.0005550665619484873]],[12,"Torso",22,[[11,"Torso_end",-34,[0,"1dmnpOXmNck7aYNeic7ags",1,0],[1,1.5612511904176723e-19,0.011592737399041653,4.440891999238953e-18]]],[0,"468AyXGmtTB4t5bH3C5hpO",1,0],[1,2.3564155834931988e-11,0.01467173546552658,1.0163526686923774e-9],[3,0.06518349789635298,0.0008379450291840548,-0.017830681036914243,0.9977136243751932],[1,7.480036142222443,0.22913257622433084,-2.0327413044171383]],[12,"BackFoot.R",3,[[11,"BackFoot.R_end",-35,[0,"c5L6bFM0tStar8Mq5a2m7j",1,0],[1,0,0.006745369639247656,0]]],[0,"74u3lt7adaO6eIweYTWfwJ",1,0],[1,-0.008358624763786793,0.0010000348556786776,-0.01635134406387806],[3,0.7071068407908391,-7.052582993953335e-7,-7.052581857084939e-7,0.7071067215815475],[1,90.00000965934633,4.222240816162296e-13,-0.0001142919905172986]],[12,"FrontFoot.L",3,[[11,"FrontFoot.L_end",-36,[0,"20hek8PlBWs768idPWUg2H",1,0],[1,1.1102229998097382e-18,0.009999999776482582,2.7755574995243454e-19]]],[0,"a2jAo6kFZZUob0in3TCs/x",1,0],[1,0.008608940057456493,0.0010000348556786776,0.011625418439507484],[3,0.7071068407904224,-0.0000010424331727468324,-0.0000010424330590599927,0.7071067215811309],[1,90.00000965934633,5.0281604972794496e-12,-0.0001689335176951215]],[12,"BackFoot.L",3,[[11,"BackFoot.L_end",-37,[0,"1eJykJvUtY0IAMxXqhbKoq",1,0],[1,1.1102229998097382e-18,0.006745369639247656,1.3877787497621727e-19]]],[0,"6bn5Dh4p5aUIP4MvJjdSF1",1,0],[1,0.007849856279790401,0.0010000348556786776,-0.01635134406387806],[3,0.7071068407904224,-0.0000010424331727468324,-0.0000010424330590599927,0.7071067215811309],[1,90.00000965934633,5.0281604972794496e-12,-0.0001689335176951215]],[43,"Sheep",1,[[68,-38,[2,"2fhpznXbJZZZkVBCqHDYmt"],[0,1],[14],1,2,3]],[0,"1c8OGYxUxQGLHAe9qcT9Vs",1,0],[3,0.9999999999999971,1.1102232893229494e-16,-1.1102230246251533e-16,7.549790126404311e-8],[1,65.45861053466797,65.45861053466797,65.45861053466797],[1,179.9999913485778,1.2722219686355036e-14,1.2722220798566492e-14]]],0,[0,2,1,0,0,1,0,-1,4,0,-2,27,0,-1,6,0,-2,9,0,-3,12,0,-4,15,0,-5,18,0,-6,19,0,-7,22,0,-1,5,0,-3,24,0,-4,25,0,-5,26,0,4,5,0,-1,7,0,-1,8,0,4,8,0,-1,10,0,-1,11,0,4,11,0,-1,13,0,-1,14,0,4,14,0,-1,16,0,-1,17,0,4,17,0,4,18,0,-1,20,0,-1,21,0,4,21,0,-1,23,0,4,23,0,4,24,0,4,25,0,4,26,0,0,27,0,9,1,2,4,3,3,4,4,38],[0,0,0,0,0,0,0],[-1,-2,6,16,-1,-2,14],[110,111,112,113,52,114,52]],[[[20,"Sparkling"],[30,"Sparkling",[-2],[0,"5dKoQA71ZEp76xT0c5g+wz",-1,0]],[81,"smoke",1,[-3],[0,"57w04KJXFEVpYLGX3s3BIR",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[142,0.3,false,false,0,2,[2,"0b7a7v3FVOCpzmec7amMlB"],[0],[146,4,[198,[[199],[200,1,[4,4278255595]]],[[201,255],[202,255,0.9933035714285714]]]],[58,3,0.1,2],[5],[5],[25,10],[5],[5],[59,3,3.141592653589793],[5],[25,1],[5],[25,100],[5],[83,true,[57,2,[4,4294246377],[4,4290957525]]],[96,true,2,0.05,3,0.3,0.5235987755982988,[25,1],[1,10,10,10]],[84,true,[44,1,[45,2,[0,1],[[60,2,0.9851851851851852],[61,2,-1.52,-1.52]]]],[5],[5],[5]],[155,true,[5],[147,1,10,[152,[0,1],[[60,2,0.04444444444444444],[60,2,-1]]]],[5],[25,1]],[71,[25,1],[25,-1],[25,1]],[72,[5],[5],[5],[5]],[73,[5],[5],[5]],[74,true,4,2,1,[44,1,[45,2,[0,1],[[61,2,1,1],[53,2,1,1,1]]]],[5]],[75],[76,[25,1],[5],[42],[42],-4],[77,1,2]]],0,[0,2,1,0,-1,2,0,-1,3,0,17,3,0,9,1,4],[0,0,0],[-1,18,19],[18,18,24]],[[[23,".bin",3006282344,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":265440,"length":23136,"count":5784,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":265440,"count":5530,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.740324854850769,-0.038644541054964066,-0.9278509020805359],"maxPosition",8,[1,1.0118893384933472,4.637710094451904,0.9271605610847473]]],-1],0,0,[],[],[]],[[[69,"Skin-0",1676884100,["Armature/root","Armature/root/FrontFoot.R","Armature/root/Body","Armature/root/Body/FrontLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R/FrontLowLeg.R","Armature/root/Body/BackLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R/BackLowLeg.R","Armature/root/Body/FrontLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L/FrontLowLeg.L","Armature/root/Body/BackLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L/BackLowLeg.L","Armature/root/Body/Back","Armature/root/Body/Shoulders","Armature/root/Body/Shoulders/Neck","Armature/root/Body/Shoulders/Neck/Head","Armature/root/Body/Hips","Armature/root/Body/Hips/Torso","Armature/root/BackFoot.R","Armature/root/FrontFoot.L","Armature/root/BackFoot.L"],[[[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,0,0,0,1],[7,1,1.221445088829075e-22,-0.000001994771309909993,0,-1.221445088829075e-22,-1,-1.2246468525851679e-16,0,-0.000001994771309909993,1.2246468525851679e-16,-1,0,0.012202510610222816,-0.01927023008465767,0.001000010408461094,1],[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,-0.0000537765008630231,-0.023020826280117035,0.00017354160081595182,1],[7,-2.902661292748798e-14,-1,-2.935201734999282e-7,0,1.9470718370939721e-7,2.935201734999282e-7,-1,0,1,-8.617709817233463e-14,1.9470718370939721e-7,0,-0.022225508466362953,-0.004215793218463659,-0.018557405099272728,1],[7,0.9992793202400208,-3.659940617239954e-8,0.03795874863862991,0,-0.037367112934589386,-0.17586931586265564,0.9837040901184082,0,0.006675743032246828,-0.9844135642051697,-0.17574256658554077,0,0.011487830430269241,0.018615419045090675,0.022629311308264732,1],[7,1,-1.585666531411789e-8,2.480254295278428e-7,0,-2.39512019106769e-7,0.20492984354496002,0.9787766337394714,0,-6.634795113313885e-8,-0.9787766337394714,0.20492984354496002,0,0.012338528409600258,0.012713761068880558,0.018785972148180008,1],[7,-4.207132960152432e-13,-1,-7.532771633123048e-7,0,1.9470718370939721e-7,7.532771633123048e-7,-1,0,1,-5.673817535592485e-13,1.9470718370939721e-7,0,-0.023520853370428085,-0.004215818364173174,0.026276588439941406,1],[7,0.9992510080337524,4.943616183084032e-9,-0.038695961236953735,0,0.0349908173084259,0.42700377106666565,0.903572678565979,0,0.016523325815796852,-0.9042498469352722,0.4266839623451233,0,0.009229985997080803,0.010048515163362026,-0.034186869859695435,1],[7,1.0000001192092896,1.9992134170365716e-8,2.294946028769118e-7,0,-2.1670182093203039e-7,-0.25633805990219116,0.9665873050689697,0,7.815235392172326e-8,-0.9665871858596802,-0.25633808970451355,0,0.010545974597334862,0.018086502328515053,-0.028966011479496956,1],[7,-5.833650077759212e-14,1,-2.935200882347999e-7,0,-9.589427918399451e-8,2.935200882347999e-7,1,0,1,8.648339883858894e-14,9.589427918399451e-8,0,-0.0222255140542984,-0.0037070203106850386,0.01855739764869213,1],[7,0.9945321083068848,9.479165186121463e-8,-0.10443174839019775,0,0.1028040423989296,-0.17586933076381683,0.9790306687355042,0,-0.0183662511408329,-0.9844136238098145,-0.17490769922733307,0,-0.009449101984500885,0.018615419045090675,0.023291079327464104,1],[7,1,1.2028807816477638e-7,2.224404909156874e-7,0,-2.4237021989392815e-7,0.20492982864379883,0.9787766337394714,0,7.215046338160391e-8,-0.9787766933441162,0.20492978394031525,0,-0.011829766444861889,0.012713762931525707,0.01878596656024456,1],[7,-4.822196244744226e-13,1,-7.532769927820482e-7,0,-1.1297453283987124e-7,7.532769927820482e-7,1,0,1,5.673207671870462e-13,1.1297453283987124e-7,0,-0.02352084219455719,-0.0037070452235639095,-0.026276597753167152,1],[7,0.9998193979263306,1.729508447567696e-8,0.01900491863489151,0,-0.01718520186841488,0.42700377106666565,0.9040865898132324,0,-0.00811515562236309,-0.9042497873306274,0.4269266426563263,0,-0.009392938576638699,0.010048513300716877,-0.03398875147104263,1],[7,1.0000001192092896,-3.829617867268098e-8,3.0222182090255956e-7,0,-3.0194053124432685e-7,-0.25633829832077026,0.9665871262550354,0,4.045443091627021e-8,-0.9665871858596802,-0.2563382387161255,0,-0.010037186555564404,0.0180865116417408,-0.028966011479496956,1],[7,1.0000001192092896,2.2545648751788952e-14,4.7683710135970614e-7,0,1.3881681582006422e-7,-0.9566866755485535,-0.2911199927330017,0,4.561836419725296e-7,0.2911199927330017,-0.9566866755485535,0,0.0002690332767087966,0.021369177848100662,0.03625044226646423,1],[7,-0.9990076422691345,0.040411219000816345,-0.01872910000383854,0,-0.04263587296009064,-0.9892835021018982,0.13964474201202393,0,-0.012885171920061111,0.14030469954013824,0.9900245666503906,0,-0.000650342961307615,-0.010275914333760738,-0.02393786422908306,1],[7,-0.9999998807907104,6.3928204951935186e-9,0.000005154064183443552,0,0.0000013785896726403735,-0.9632322192192078,0.26867103576660156,0,0.0000049662762648949865,0.26867106556892395,0.9632320404052734,0,-0.00026915912167169154,-0.023492753505706787,-0.02103027142584324,1],[7,-0.8661967515945435,-0.0017019043443724513,0.49970006942749023,0,-0.2609688341617584,-0.8512482047080994,-0.45527133345603943,0,0.4261435270309448,-0.5247607231140137,0.7369042038917542,0,-0.02164512686431408,-0.01101308036595583,-0.03701946884393692,1],[7,-1,1.370309573277273e-12,0.000009687740202934947,0,-0.0000013784924703941215,-0.9898243546485901,-0.142292320728302,0,0.000009589163710188586,-0.14229227602481842,0.989824652671814,0,-0.00026932056061923504,0.025946469977498055,-0.027875103056430817,1],[7,-0.9996329545974731,-0.027093209326267242,-0.00005722458445234224,0,0.02701890468597412,-0.9970427751541138,0.07193955779075623,0,-0.002006129128858447,0.07191158086061478,0.9974090456962585,0,-0.0003346375306136906,0.0024776593782007694,-0.029072916135191917,1],[7,1,1.367434464739662e-22,-0.0000022331898890115554,0,-1.367434464739662e-22,-1,-1.2246468525851679e-16,0,-0.0000022331898890115554,1.2246468525851679e-16,-1,0,0.011179232969880104,0.030364984646439552,0.0010000098263844848,1],[7,1,1.8054022138181879e-22,-0.000002948445626316243,0,-1.8054022138181879e-22,-1,-1.2246468525851679e-16,0,-0.000002948445626316243,1.2246468525851679e-16,-1,0,-0.011693734675645828,-0.01927023008465767,0.0010000691981986165,1],[7,1,1.9513914635110298e-22,-0.0000031868642054178054,0,-1.9513914635110298e-22,-1,-1.2246468525851679e-16,0,-0.0000031868642054178054,1.2246468525851679e-16,-1,0,-0.010670460760593414,0.030364984646439552,0.0010000687325373292,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,".bin",85728825,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":68992,"length":6264,"count":1566,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":80376,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":68992,"count":1078,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]},{"view":{"offset":75256,"length":5120,"count":80,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]]},"minPosition",8,[1,-0.016555821523070335,-0.051976002752780914,-0.000015856254321988672],"maxPosition",8,[1,0.016555821523070335,0.045862454921007156,0.04588065296411514]]],-1],0,0,[],[],[]],[[[38,"Material.003",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":9.607843137254903,"emissiveScale":0,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4288979416],"emissive",8,[4,4288979416]]],11]]],0,0,[0],[11],[7]],[[[38,"Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":9.607843137254903,"emissiveScale":0,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4282274684],"emissive",8,[4,4282274684]]],11]]],0,0,[0],[11],[7]],[[[23,".bin",433791708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":125520,"length":11292,"count":2823,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":125520,"count":2615,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6760444641113281,-0.28679198026657104,-0.8514330983161926],"maxPosition",8,[1,0.9305482506752014,4.436491012573242,0.5037089586257935]]],-1],0,0,[],[],[]],[[[20,"Grape_2"],[29,"Grape_2",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[47,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,115]],[[[20,"wheat_2"],[30,"wheat_2",[-2,-3,-4],[0,"74gGhvqp1fzIEFLpVvPdM5",-1,0]],[37,"Sphere001",1,[[17,-5,[2,"25U7C03lNWYIuFpE1guGbw"],[0],[14],1]],[0,"b39i51Ey5SiaMnzMt9zrev",1,0],[1,0.694,0,0.022],[1,2,2,2]],[37,"Sphere002",1,[[17,-6,[2,"ebm3gyg4ZMHpxWRVvweb7r"],[2],[14],3]],[0,"b4DwksMzFIsatcwO7Vspgl",1,0],[1,-0.202,0,0.48],[1,2,2,2]],[37,"Sphere003",1,[[17,-7,[2,"bcgmv+QSdFvJ3JrRIC0Pae"],[4],[14],5]],[0,"0fLrECN9ZGFIS0xrsXu+OV",1,0],[1,-0.11,0,-0.433],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,25,2,25,2,25]],[[[138,"SmokeSpawn",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4290361785],"mainTexture",6,0]],11]]],0,0,[0,0],[15,11],[19,53]],[[[20,"Windmill"],[30,"Windmill",[-2],[0,"14sb8EF9xV37UUNjK1kL1q",-1,0]],[123,"Windmill",1,[-3,-4],[0,"c5Aks25sRZNq2mo3o10Ry/",1,0],[1,2,2,2]],[47,"Windmill",2,[[17,-5,[2,"d5CltKBOlYhJk75HbOQAc0"],[0],[14],1]],[0,"51pPlD12hSpZe1ghdXaT3+",1,0],[1,0.4724409878253937,0.4724409878253937,0.4724409878253937]],[37,"Windmill_rotate",2,[[17,-6,[2,"5bSecZvulZEKxuOODnzMZU"],[2],[14],3]],[0,"21zK/vFMhdSbPn59XYJmOc",1,0],[1,-0.011,9.413,-3.428],[1,0.7,0.7,0.5]]],0,[0,2,1,0,-1,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,9,1,6],[0,0,0,0],[-1,6,-1,6],[2,116,2,117]],[[[20,"Carrot_1"],[30,"Carrot_1",[-2,-3,-4],[0,"8a478nDfZdfZlePO9DkB6i",-1,0]],[49,"Sphere002",1,[[17,-5,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,-0.52,0,1.057]],[49,"Sphere003",1,[[17,-6,[2,"532F0MkslEk7TpER/xm79b"],[2],[14],3]],[0,"a44X1mZEhBZrWSism9YE2P",1,0],[1,-0.52,0,-1.154]],[49,"Sphere004",1,[[17,-7,[2,"a75Aw91RJAp7lDTDZp1cGS"],[4],[14],5]],[0,"e7I41wmQ5LWK2nKPf0b291",1,0],[1,0.911,0,-0.066]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,26,2,26,2,26]],[[[20,"HarvestTime"],[30,"HarvestTime",[-2],[0,"63z2qxxkFJ8JF2Bwd2KieO",-1,0]],[81,"angerLight01",1,[-3],[0,"26MSwq3mVFT6WpFweuKUc0",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[143,3,80,2,[2,"161bhoP8RKFp30flDZIqLZ"],[0],[57,2,[4,2523190527],[4,2516582655]],[58,3,2,0.3],[5],[5],[58,3,1,1.5],[5],[5],[59,3,6.283185307179586],[5],[25,0.8],[5],[25,20],[5],[148,[57,2,[4,4282702591],[4,4282008319]]],[149,true,0.297,0.5,0,[25,0.5],[1,10,10,10]],[151,[44,1,[45,2,[0,1],[[60,2,0.44074074074074077],[53,2,0.5370370370370371,-1.67,-1.67]]]],[5],[5],[5]],[85,[5],[5],[5],[25,1]],[71,[5],[5],[5]],[72,[5],[5],[5],[5]],[73,[5],[5],[5]],[74,true,4,2,1,[44,1,[45,2,[0,1],[[61,2,1,1],[53,2,1,1,1]]]],[5]],[75],[76,[25,1],[5],[42],[42],-4],[77,1,2]]],0,[0,2,1,0,-1,2,0,-1,3,0,17,3,0,9,1,4],[0,0,0],[-1,18,19],[18,18,24]],[[{"name":"default_progressbar_bg","rect":{"x":0,"y":0,"width":60,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-30,-7.5,0,30,-7.5,0,-30,7.5,0,30,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,60,15,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-7.5,"z":0},"maxPos":{"x":30,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[118]],[[[23,".bin",1040598548,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46608,"length":13548,"count":3387,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46608,"count":971,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007032963912934065,-0.0071277497336268425,-0.000023158594558481127],"maxPosition",8,[1,0.007013940252363682,0.005071590188890696,0.01966613158583641]]],-1],0,0,[],[],[]],[[[20,"Carrot_2"],[30,"Carrot_2",[-2,-3,-4],[0,"8a478nDfZdfZlePO9DkB6i",-1,0]],[37,"Sphere002",1,[[17,-5,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,-1.007,0.19,0.812],[1,2,2,2]],[36,"Sphere003",1,[[17,-6,[2,"3dibty/5tABI5JN1nQJzX8"],[2],[14],3]],[0,"73ltZPNJlG36KcWCK4vLp1",1,0],[1,-0.13,0.19,-1.025],[3,0,0.40852960018622864,0,0.9127450716227835],[1,2,2,2],[1,0,48.225,0]],[36,"Sphere004",1,[[17,-7,[2,"ccDtNFHVBJAoKkNyLG+wyt"],[4],[14],5]],[0,"50WsYXojZNKYi5hv09m0cl",1,0],[1,0.857,0.19,0.618],[3,0,0.40852960018622864,0,0.9127450716227835],[1,2,2,2],[1,0,48.225,0]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,27,2,27,2,27]],[[[38,"boxUpLight01",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4285887861],"mainTexture",6,0]],11]]],0,0,[0,0],[15,11],[24,53]],[[[69,"Skin-0",1727875492,["Armature/root","Armature/root/FrontFoot.R","Armature/root/Body","Armature/root/Body/FrontLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R","Armature/root/Body/FrontLeg.R/FrontUpLeg.R/FrontLowLeg.R","Armature/root/Body/BackLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R","Armature/root/Body/BackLeg.R/BackUpLeg.R/BackLowLeg.R","Armature/root/Body/FrontLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L","Armature/root/Body/FrontLeg.L/FrontUpLeg.L/FrontLowLeg.L","Armature/root/Body/BackLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L","Armature/root/Body/BackLeg.L/BackUpLeg.L/BackLowLeg.L","Armature/root/Body/Back","Armature/root/Body/Back/Tail1","Armature/root/Body/Back/Tail1/Tail2","Armature/root/Body/Back/Tail1/Tail2/Tail3","Armature/root/Body/Back/Tail1/Tail2/Tail3/Tail4","Armature/root/Body/Shoulders","Armature/root/Body/Shoulders/Neck","Armature/root/Body/Shoulders/Neck/Head","Armature/root/Body/Hips","Armature/root/Body/Hips/Torso","Armature/root/BackFoot.R","Armature/root/FrontFoot.L","Armature/root/BackFoot.L"],[[[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,0,0,0,1],[7,1,1.075455965353978e-22,-0.0000017563529581821058,0,-1.075455965353978e-22,-1,-1.2246468525851679e-16,0,-0.0000017563529581821058,1.2246468525851679e-16,-1,0,0.009117711335420609,-0.01927023008465767,0.0010000186739489436,1],[7,1,0,0,0,0,6.123234262925839e-17,-1,0,0,1,6.123234262925839e-17,0,-0.0000537765008630231,-0.023020826280117035,0.00017354160081595182,1],[7,-7.943073146920651e-14,-1,-3.956771479352028e-7,0,1.9470718370939721e-7,3.956771479352028e-7,-1,0,1,-1.5647192200783644e-13,1.9470718370939721e-7,0,-0.03140079602599144,-0.0031930229160934687,-0.018557406961917877,1],[7,0.9992793202400208,7.817317992930839e-8,0.03795882686972618,0,-0.03744172304868698,-0.16449666023254395,0.985666811466217,0,0.006244175601750612,-0.9863777756690979,-0.1643780767917633,0,0.008321077562868595,0.027920423075556755,0.023802941665053368,1],[7,0.9999998807907104,8.070195889331444e-8,1.987690723126434e-7,0,-2.0585146387475106e-7,0.10014060884714127,0.994973361492157,0,6.039142164127043e-8,-0.9949736595153809,0.10014057904481888,0,0.009218607097864151,0.01881570555269718,0.019205018877983093,1],[7,1.1920848663748984e-7,-1.0000001192092896,-0.0000010154482197322068,0,1.9470715528768778e-7,0.0000010154482197322068,-1,0,1.0000001192092896,1.1920828768552383e-7,1.947072689745255e-7,0,-0.031400807201862335,-0.0031930566765367985,0.02195880562067032,1],[7,0.9992508888244629,3.1871863370724896e-8,-0.03869609907269478,0,0.03139324113726616,0.584661602973938,0.8106695413589478,0,0.022624149918556213,-0.8112770915031433,0.584223747253418,0,0.006483175326138735,0.012636274099349976,-0.036451708525419235,1],[7,1,9.931482480851628e-8,1.284574153714857e-7,0,-1.1668206667536651e-7,-0.11062692850828171,0.9938617944717407,0,1.1291607648900026e-7,-0.9938619136810303,-0.11062690615653992,0,0.007888861000537872,0.025572653859853745,-0.02564503811299801,1],[7,-6.477578754415445e-14,1,-3.956770342483651e-7,0,-2.3215589806113712e-7,3.956770342483651e-7,1,0,1,1.566345387811821e-13,2.3215589806113712e-7,0,-0.03140080347657204,-0.002684251172468066,0.018557392060756683,1],[7,0.9945321083068848,4.430908617791829e-8,-0.10443182289600372,0,0.10300923138856888,-0.16449664533138275,0.9809842109680176,0,-0.017178641632199287,-0.9863777160644531,-0.16359718143939972,0,-0.006211212836205959,0.027920419350266457,0.0242511797696352,1],[7,1,7.040221561283033e-8,2.3092101741895021e-7,0,-2.368103366734431e-7,0.10014048963785172,0.994973361492157,0,4.6923773311391415e-8,-0.9949734210968018,0.10014048218727112,0,-0.00870984885841608,0.01881568878889084,0.019205018877983093,1],[7,-9.405196890396872e-13,1,-0.0000010154477649848559,0,-8.922222605178831e-8,0.0000010154477649848559,1,0,1,1.0311201762217004e-12,8.922222605178831e-8,0,-0.03140079602599144,-0.0026842805091291666,-0.021958813071250916,1],[7,0.9998193979263306,-2.6094554073097243e-8,0.01900486648082733,0,-0.01541819702833891,0.5846618413925171,0.8111305236816406,0,-0.011111441068351269,-0.8112771511077881,0.5845562219619751,0,-0.006691282149404287,0.012636265717446804,-0.036307260394096375,1],[7,1,3.1782598775009774e-9,2.6798463181876286e-7,0,-2.6598817726153356e-7,-0.11062703281641006,0.9938620328903198,0,3.280509730529957e-8,-0.9938620924949646,-0.11062702536582947,0,-0.0073800827376544476,0.025572657585144043,-0.025645041838288307,1],[7,1,1.3010425425610684e-22,4.76837158203125e-7,0,1.3881683003091894e-7,-0.9566864967346191,-0.2911199927330017,0,4.56183670394239e-7,0.2911199927330017,-0.9566864967346191,0,0.00026903030811809003,0.012349234893918037,0.04253220558166504,1],[7,1,1.2409302752036666e-10,4.582857964646747e-12,0,-1.2416137562532015e-10,0.9985907673835754,0.053069405257701874,0,2.009153694110255e-12,-0.05306966230273247,0.9985859990119934,0,0.00015737058129161596,-0.024428974837064743,-0.04922361299395561,1],[7,1,-2.3420737571555605e-10,2.3842022756070946e-7,0,-2.3413187477672182e-7,0.18785133957862854,0.9821969270706177,0,-4.501780992427484e-8,-0.9821930527687073,0.18785202503204346,0,0.00015738098591100425,0.039924945682287216,-0.04364730417728424,1],[7,-1,7.035073912309286e-11,3.8943693425608217e-7,0,-3.8728725826331356e-7,-0.10510523617267609,-0.9944610595703125,0,4.0862090600057854e-8,-0.9944562911987305,0.10510572791099548,0,-0.00015735780471004546,0.042466901242733,0.03273717686533928,1],[7,-1,5.799694946517775e-8,3.1960988167156756e-7,0,-3.2482691381119366e-7,-0.18237243592739105,-0.9832294583320618,0,1.263730675660213e-9,-0.983224630355835,0.18237334489822388,0,-0.00015735880879219621,0.03791962191462517,0.029869725927710533,1],[7,-0.9983536601066589,0.03149224445223808,-0.04793712869286537,0,-0.05735006928443909,-0.5359179973602295,0.8423197865486145,0,0.0008361703949049115,0.8436827659606934,0.536841630935669,0,-0.0017681776080280542,-0.044484321027994156,-0.00664231413975358,1],[7,-1.0000001192092896,1.0994877008840831e-8,0.000005181227152206702,0,0.000003803521849476965,-0.6774875521659851,0.7355341911315918,0,0.0000035183045383746503,0.7355343699455261,0.6774874925613403,0,-0.0002691377012524754,-0.055580634623765945,-0.016679488122463226,1],[7,-0.8662223815917969,-0.0015339370584115386,0.4996565282344818,0,-0.27237826585769653,-0.8368988037109375,-0.4747740626335144,0,0.41889023780822754,-0.5473552942276001,0.7245228886604309,0,-0.035693008452653885,0.005083934403955936,-0.06132461130619049,1],[7,-1,2.092813905030591e-13,0.000009687739293440245,0,-3.4448314067958563e-7,-0.9993674159049988,-0.03555864840745926,0,0.000009681612027634401,-0.03555864840745926,0.9993675351142883,0,-0.00026943194097839296,0.016325578093528748,-0.03936338797211647,1],[7,-0.9996330142021179,-0.02709319442510605,-0.00005722550122300163,0,0.02701888047158718,-0.9970430135726929,0.07193925976753235,0,-0.0020061202812939882,0.0719112902879715,0.9974091053009033,0,-0.00019675440853461623,-0.0025880569592118263,-0.039313461631536484,1],[7,1,1.075455965353978e-22,-0.0000017563529581821058,0,-1.075455965353978e-22,-1,-1.2246468525851679e-16,0,-0.0000017563529581821058,1.2246468525851679e-16,-1,0,0.008358626626431942,0.026047201827168465,0.0010000200709328055,1],[7,1,1.6594129641253459e-22,-0.0000027100270472146804,0,-1.6594129641253459e-22,-1,-1.2246468525851679e-16,0,-0.0000027100270472146804,1.2246468525851679e-16,-1,0,-0.00860893726348877,-0.01927023008465767,0.001000058138743043,1],[7,1,1.6594129641253459e-22,-0.0000027100270472146804,0,-1.6594129641253459e-22,-1,-1.2246468525851679e-16,0,-0.0000027100270472146804,1.2246468525851679e-16,-1,0,-0.007849853485822678,0.026047201827168465,0.00100005604326725,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[70,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"emissiveScale":0,"shininessExponent":9.607843137254903,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4280756007],"emissive",8,[4,4280756007]],{},{}],11,0,0]]],0,0,[0],[11],[7]],[[[70,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"emissiveScale":0,"shininessExponent":9.607843137254903,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4282207604],"emissive",8,[4,4282207604]],{},{}],11,0,0]]],0,0,[0],[11],[7]],[[[23,".bin",2235295983,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":67328,"length":6048,"count":1512,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":97952,"length":2232,"count":558,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":67328,"count":1052,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]},{"view":{"offset":73376,"length":24576,"count":384,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,7,8,9,10,11,13,14,15,16,17,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-0.012848868034780025,-0.05116979777812958,0.0001846075028879568],"maxPosition",8,[1,0.012848868034780025,0.04118158295750618,0.0692378357052803]]],-1],0,0,[],[],[]],[[[20,"animal_2"],[40,"animal_2",[-3,-4],[[134,-2,[2,"1fzKoYooBSiqbvklfJE2ny"],[4,5,6,7,8,9]]],[0,"eaxt5Sh2ZWWYI8r8AeP323",-1,0]],[29,"Body",[-5,-6,-7,-8,-9,-10,-11],[0,"621WcCUZ5e2YDx5Tw4WuyQ",1,0],[1,0.0000537765008630231,0.023020822554826736,-0.00017354160081595182]],[66,"root",[-12,2,-13,-14,-15],[0,"19z7gJkZVWqpghf0bFSF2w",1,0],[3,0.7071068407911908,0,0,0.7071067215818992],[1,90.00000965934633,0,0]],[67,"Armature",1,[3],[0,"c6iDqTOcxQvY1iD0ueskYy",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[12,"FrontFoot.R",3,[[11,"FrontFoot.R_end",-16,[0,"33I/MYkzxd34rB2w/7ksWs",1,0],[1,-1.1102229998097382e-18,0.009999999776482582,1.3877787497621727e-19]]],[0,"a44yApoA5fkYj5yjWTF5Tg",1,0],[1,-0.009117710404098034,0.0010000348556786776,0.01927023008465767],[3,0.7071068407909181,-6.209646236899395e-7,-6.209645668465197e-7,0.7071067215816265],[1,90.00000965934633,3.87667620832701e-12,-0.0001006316202376715]],[8,"FrontLeg.R",2,[-17],[0,"89K+dEJOtT/5PCB1wHPZLg",1,0],[1,-0.0032468067947775126,0.008379977196455002,0.01873094029724598],[3,0.0012952884202324106,-0.0012955682826612425,0.7071055647628505,0.7071056243674941],[1,89.99867052826072,-89.99869320512238,89.79006673189204]],[8,"FrontUpLeg.R",6,[-18],[0,"788AFkKphTmpJqpRVuAi4Z",1,0],[1,2.4487718519594637e-9,0.006025583017617464,6.021457221727644e-10],[3,0.706853564541443,-0.7022758682440338,-0.04508993749057004,0.07164873142101912],[1,95.04363367817759,-75.48471135759631,-87.81611699616465]],[12,"FrontLowLeg.R",7,[[11,"FrontLowLeg.R_end",-19,[0,"bcFD0g9TdbvKLyTmuWwINq",1,0],[1,0,0.015877680853009224,2.2204459996194763e-18]]],[0,"0bNmUKZg5Qopme8auFoE21",1,0],[1,8.19563861220729e-10,0.014804559759795666,7.450580430390374e-11],[3,0.1331460446931698,-0.018813656233402656,0.0025279523720033188,0.9909146212356041],[1,15.305631002608129,-2.175391787385122,0.000002412554620199633]],[8,"BackLeg.R",2,[-20],[0,"00b0496+ZXgY6Y3Vnr70oS",1,0],[1,-0.0032468067947775126,0.008379977196455002,-0.021785270422697067],[3,0.0007835572993493648,-0.000784275465464433,0.7071063466516025,0.7071063466516025],[1,89.99997090402447,-90.00002909596121,89.87296088624299]],[8,"BackUpLeg.R",9,[-21],[0,"e6l6Y0ONlWh4eR6RBvY/W0",1,0],[1,2.6392144025777498e-9,0.004695829935371876,2.844441349125759e-9],[3,-0.6711558061437017,0.6744514661419378,-0.20213857166258833,0.2319592669948692],[1,-65.8136082604064,78.42660923213249,-87.56878091632545]],[12,"BackLowLeg.R",10,[[11,"BackLowLeg.R_end",-22,[0,"63NiV51RJUTI2xoVTxxJ7n",1,0],[1,0,0.021711884066462517,-4.440891999238953e-18]]],[0,"cd/QjGGjNVXJyPM3VFDjh8",1,0],[1,-1.303851610012785e-10,0.010874390602111816,1.3783574281944766e-9],[3,-0.357463601726651,0.018072592270244717,0.0069187652060998615,0.9337265582263721],[1,-41.8972320491341,2.2176787497755472,-0.000006772635116469312]],[8,"FrontLeg.L",2,[-23],[0,"b6wuasjBZVcIXwA5Su3vta",1,0],[1,0.002630481729283929,0.008379977196455002,0.01873094029724598],[3,0.7071054153926467,0.7071054749972929,0.0013744056093762014,-0.0013746855882320113],[1,-89.99874639371293,-90.00123091999457,89.77724521028026]],[8,"FrontUpLeg.L",12,[-24],[0,"0fp3+G2gxXoKgUFg47jP5W",1,0],[1,-1.756112921746933e-9,0.006025584880262613,8.378248095297636e-10],[3,-0.02159131891643826,-0.0950879461007112,0.7079610872193227,0.6994878100703624],[1,91.83742545141908,-101.31553480725925,84.00249672666698]],[12,"FrontLowLeg.L",13,[[11,"FrontLowLeg.L_end",-25,[0,"a2+3Ek8+Zdl7BH2rleInj8",1,0],[1,0,0.015877680853009224,0]]],[0,"6cpNdZOdJTQosvE5xZMmcx",1,0],[1,5.21540644005114e-10,0.01480456069111824,-2.2351742678949904e-9],[3,0.13298889845622416,0.0518218384837552,-0.006963174712129553,0.9897373207783426],[1,15.30574958155501,5.994446392534305,0.0000017569448676354595]],[8,"BackLeg.L",2,[-26],[0,"5bI24GBVBRUZ5tPVmUwgPB",1,0],[1,0.002630481729283929,0.008379977196455002,-0.021785270422697067],[3,0.7071064108167839,0.7071065300260734,0.0006625798408461719,-0.000663298006965872],[1,0,180.10749206804024,90]],[8,"BackUpLeg.L",15,[-27],[0,"64jLnWQ0lZjLNVUBxN6b+f",1,0],[1,-1.7321695189309594e-9,0.004695831332355738,-5.743572839556066e-10],[3,0.20885529998403182,0.2254200118205795,0.6690967641935,0.6766644678754589],[1,-47.56156043426251,83.33119945023036,88.52430684541918]],[12,"BackLowLeg.L",16,[[11,"BackLowLeg.L_end",-28,[0,"c6nMiuGa1dtJVTzd1z9Rz2",1,0],[1,1.1102229998097382e-18,0.021711884066462517,0]]],[0,"7fG1gRML5YOohHx1wtXEqA",1,0],[1,1.3876706450588472e-9,0.010874389670789242,-2.9802322831784522e-9],[3,-0.3575146799690923,-0.008874606354457956,-0.003397634490841542,0.9338591708863375],[1,-41.897265414717886,-1.0889531390263516,-0.000012614001200186714]],[8,"Back",2,[-29],[0,"183KhBqOxWL6VKFG499ks0",1,0],[1,-0.0003228271089028567,0.014074056409299374,-0.02402278035879135],[3,0.6010642163827888,-0.0214282017473418,0.028488763208185965,0.7984053045445573],[1,73.98588806223908,-3.92653097532807,1.130617007687284]],[90,"Tail1",18,[-30],[0,"a4b4XAUe9ebp8D+7zFqqje",1,0],[1,0.00011168522905791178,0.0004445839731488377,-0.01111518032848835],[3,0.9926701262969037,2.530156547821115e-8,2.203457983819794e-7,-0.12085536958546783],[1,1,1,1.0000048875808716],[1,-166.1170581079711,-0.000025415092459187126,-1.734761162759429e-7]],[8,"Tail2",19,[-31],[0,"7fa/jbAqNTwYBOeCiplz3B",1,0],[1,-1.490116086078075e-10,0.008375221863389015,-2.9220245667538336e-10],[3,-0.6165577197016348,9.529880210647237e-8,-7.154803710450899e-8,0.7873097092480863],[1,-76.13038874521416,0.0000035427329870885525,-0.000013188076264186874]],[8,"Tail3",20,[-32],[0,"71MKA6+A1Um5o+vjnHaX6K",1,0],[1,1.490116086078075e-10,0.008778818883001804,5.038454986561192e-9],[3,-9.271659996802928e-9,0.9891947031850706,-0.14660777329493307,3.18719632334745e-7],[1,16.860785764413187,179.99996402782176,-0.000006405467907751404]],[12,"Tail4",21,[[11,"Tail4_end",-33,[0,"c1FRtiZxRWurYwrh/97jaX",1,0],[1,0,0.01026824489235878,4.440891999238953e-18]]],[0,"09kjYefSJdrLyJPxDFKIMS",1,0],[1,2.7755574995243454e-19,0.006993298418819904,2.5518238633281953e-9],[3,0.03904001009515864,3.58832782698927e-8,1.491252975259389e-8,0.9992376482157628],[1,4.474792801096338,0.0000040420725472042225,0.000001868076718041104]],[8,"Shoulders",2,[-34],[0,"4eueEnZadYXKw67YmonKrs",1,0],[1,-0.0007365465280599892,0.01807716116309166,0.01851993054151535],[3,0.008421451052746927,0.9597338069228858,0.2794420189265245,-0.02742730518551501],[1,-32.46892103661168,-176.71214203094826,0.04790039382298016]],[8,"Neck",23,[-35],[0,"b86aHRPRNSlYPsNiEiSjnb",1,0],[1,5.122274132629556e-11,0.013137188740074635,2.712476909749739e-10],[3,-0.0886846790567607,-0.022488868112285784,-0.017817650187023866,0.9956464281327185],[1,-10.223395129333626,-2.7493052912714067,-1.804618282098218]],[12,"Head",24,[[11,"Head_end",-36,[0,"46LlRHIk9eKYHVefBjXZ/S",1,0],[1,0,0.01775381900370121,1.776356799695581e-17]]],[0,"9fveWWOtpbjqaKGAnn0NWp",1,0],[1,-2.39742808938459e-11,0.013573313131928444,3.3753928541102596e-9],[3,-0.6245374799606817,-0.19781437896428433,0.16660769604005599,0.7369289539837338],[1,-79.11122360848766,-5.502426603138088,29.51431895269537]],[8,"Hips",2,[-37],[0,"8cSQ9IW4dbsqg2IaURPhQU",1,0],[1,-0.0003228271089028567,0.016898196190595627,-0.014742005616426468],[3,0.000003487624764492713,0.6944211092559098,0.719568845209615,0.0000033658895813566903],[1,-92.03778993215424,-179.99998026259544,0.0005550665619484873]],[12,"Torso",26,[[11,"Torso_end",-38,[0,"2cdEVYoUVQ1IjS6eeN9KTk",1,0],[1,-6.938893748810864e-20,0.015270233154296875,0]]],[0,"c0mTwrj5BSmIROHCA9QTYY",1,0],[1,2.1590436036222904e-11,0.014671733602881432,5.460347729524528e-10],[3,0.05375247793241081,0.0007617085899636836,-0.013526975106839246,0.9984623737831129],[1,6.165413201806021,0.1705337539528226,-1.5431884931505082]],[12,"BackFoot.R",3,[[11,"BackFoot.R_end",-39,[0,"a5kgvCC1Rc4q/JEioQiqJ2",1,0],[1,0,0.006745369639247656,1.3877787497621727e-19]]],[0,"1eWNyDcRtdKLgKaxvBLfhZ",1,0],[1,-0.008358624763786793,0.0010000348556786776,-0.026047201827168465],[3,0.7071068407909181,-6.209646236899395e-7,-6.209645668465197e-7,0.7071067215816265],[1,90.00000965934633,3.87667620832701e-12,-0.0001006316202376715]],[12,"FrontFoot.L",3,[[11,"FrontFoot.L_end",-40,[0,"f2TkfE4ipdbLIPGeRhn8/m",1,0],[1,0,0.009999999776482582,1.3877787497621727e-19]]],[0,"a7j+d1wshfdKkEBLOofHUq",1,0],[1,0.008608940057456493,0.0010000348556786776,0.01927023008465767],[3,0.7071068407905415,-9.581394970415802e-7,-9.581393833547404e-7,0.70710672158125],[1,90.0000096593463,3.876676966638594e-12,-0.00015527314280957484]],[12,"BackFoot.L",3,[[11,"BackFoot.L_end",-41,[0,"2bXyv2FTNd2I4zZTTw1EnD",1,0],[1,0,0.006745369639247656,2.7755574995243454e-19]]],[0,"abthjQJQxXQopI2BUWYcG4",1,0],[1,0.007849856279790401,0.0010000348556786776,-0.026047201827168465],[3,0.7071068407905415,-9.581394970415802e-7,-9.581393833547404e-7,0.70710672158125],[1,90.0000096593463,3.876676966638594e-12,-0.00015527314280957484]],[43,"Horse",1,[[68,-42,[2,"16b0A/pXxQqqTPyffjufCY"],[0,1],[14],1,2,3]],[0,"a13fQhFppV+I/OfrQqaWhH",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,2,1,0,0,1,0,-1,4,0,-2,31,0,-1,6,0,-2,9,0,-3,12,0,-4,15,0,-5,18,0,-6,23,0,-7,26,0,-1,5,0,-3,28,0,-4,29,0,-5,30,0,4,5,0,-1,7,0,-1,8,0,4,8,0,-1,10,0,-1,11,0,4,11,0,-1,13,0,-1,14,0,4,14,0,-1,16,0,-1,17,0,4,17,0,-1,19,0,-1,20,0,-1,21,0,-1,22,0,4,22,0,-1,24,0,-1,25,0,4,25,0,-1,27,0,4,27,0,4,28,0,4,29,0,4,30,0,0,31,0,9,1,2,4,3,3,4,4,42],[0,0,0,0,0,0,0,0,0,0],[-1,-2,6,16,-1,-2,-3,-4,-5,-6],[119,120,121,122,123,124,125,126,127,128]],[[[23,".bin",383827008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":145584,"length":12840,"count":3210,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":145584,"count":3033,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8792275190353394,0.03466874361038208,-1.3114221096038818],"maxPosition",8,[1,1.2473176717758179,3.1320736408233643,0.9050227403640747]]],-1],0,0,[],[],[]],[[[20,"wheat_1"],[30,"wheat_1",[-2,-3,-4],[0,"c3WYeDwlRaAZsuyIwXKwHV",-1,0]],[49,"Box004",1,[[17,-5,[2,"92gAjYRZlTzJxzvI2EGxfu"],[0],[14],1]],[0,"f41hermNpTP7qC1dzmP5kJ",1,0],[1,0.947,0,0.066]],[49,"Box005",1,[[17,-6,[2,"e4IbxsKClJwpoB/dYX6bYp"],[2],[14],3]],[0,"8c6zZEPiNOlKcF8Vh7MWA9",1,0],[1,-1.193,0,0.929]],[49,"Box006",1,[[17,-7,[2,"3fUL1mLAxFFIvsZOelDv6K"],[4],[14],5]],[0,"15u4ZP6vZAgaRd1OMOMs1n",1,0],[1,-1.091,0,-0.9]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,28,2,28,2,28]],[[[20,"Grape_3"],[29,"Grape_3",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[47,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,129]],[[[23,".bin",261736365,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14928,"length":4044,"count":1011,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14928,"count":311,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.007032963912934065,-0.006315536797046661,-0.000023158594558481127],"maxPosition",8,[1,0.006571477744728327,0.00439565721899271,0.01921602338552475]]],-1],0,0,[],[],[]],[[[20,"wheat_3"],[30,"wheat_3",[-2,-3,-4],[0,"8a478nDfZdfZlePO9DkB6i",-1,0]],[37,"Sphere002",1,[[17,-5,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,-0.314,0,0.43],[1,2,2,2]],[37,"Sphere003",1,[[17,-6,[2,"8bAiqtVPBCtItKjvXdNITC"],[2],[14],3]],[0,"43CF9llZFI8Jm11t6PO5D2",1,0],[1,0.873,0,-0.012],[1,2,2,2]],[37,"Sphere004",1,[[17,-7,[2,"0bHc1W0FpMq68YYyYb4PMl"],[4],[14],5]],[0,"c0dGM0TKNLIb9lL56RnZYb",1,0],[1,-0.327,0,-0.647],[1,2,2,2]]],0,[0,2,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,9,1,7],[0,0,0,0,0,0],[-1,6,-1,6,-1,6],[2,29,2,29,2,29]],[[[20,"Block"],[40,"Block",[-5,-6,-7],[[203,-4,[2,"87d76tuClLoIlB77RottaG"],6]],[137,"c46/YsCPVOJYA4mWEpNYRx",-3,0,[-1,-2]]],[124,"btn_background_round",33554432,[-11],[[32,-8,[2,"d7HAFqXgJImLaivAelo+tm"],[5,212,212]],[34,-9,[2,"05hvdhTkhPsYSINb1O+lAd"],1],[160,3,1.1,-10,[2,"f1BRztd0pJWLbTzLIRv0hm"],[[21,"aadc9bErLFGTq848KEPIpSM","onClickUnlock",1]],2]],[0,"2dBBUmqxdN+a7T527TGNgH",1,0],[1,0.5,0.5,1]],[1,["95an+OubldT6T+CThiSs6p"]],[95,"RenderRoot2D",1,[-14],[[39,-12,[2,"6bc+3zJZNHirh9r0M0xLCU"]],[89,-13,[2,"7c9KjAeLBJ4oPDYnX5F5n8"]]],[0,"22Gm0Wu25Nl6tpzGLBQeOT",1,0]],[93,"StatusNode",false,33554432,4,[2],[[39,-15,[2,"9eIu/oJb9NwIO9+lzxm5ry"]]],[0,"faVPI1XHJPwrH91B7K+PzE",1,0]],[55,"ico_lock",33554432,2,[[32,-16,[2,"f4rAp0F8tGV4pNpVVdL1Tb"],[5,114,136]],[34,-17,[2,"151GZ+x5hMpYaG7xfgfx1Q"],0]],[0,"71K53GmDdJE4NOqGy9r51K",1,0],[1,0,10.103,0],[1,0.8,0.8,1]],[13,0,null,1,[10,"95an+OubldT6T+CThiSs6p",-22,[101,"23pg6DjHZEFq7hOl0x1fck",1,[[15,"Block",["_name"],3],[4,["_lpos"],3,[1,0,0,0]],[4,["_lrot"],3,[3,0,0,0,1]],[4,["_euler"],3,[1,0,0,0]],[4,["_lpos"],-18,[1,0,0,0]],[4,["_lscale"],3,[1,15,10,15]],[4,["_lscale"],-19,[1,0.34,0.34,0.4]],[15,1,["_materials","length"],-20],[35,["_materials","0"],-21,4]]],3]],[13,0,null,1,[10,"65csPDHWte5YVTlrX4lIIL",-23,[101,"83TdswKfBEmIQ40C7/JMvN",1,[[24,"SelectingBlock",["_name"],[1,["65csPDHWte5YVTlrX4lIIL"]]],[6,["_lpos"],[1,["65csPDHWte5YVTlrX4lIIL"]],[1,0,-0.264,0]],[6,["_lrot"],[1,["65csPDHWte5YVTlrX4lIIL"]],[3,0,0,0,1]],[6,["_euler"],[1,["65csPDHWte5YVTlrX4lIIL"]],[1,0,0,0]],[6,["_lpos"],[1,["b1HBcgI09QF61q38P3UcPY"]],[1,0,0,0]],[6,["_lscale"],[1,["65csPDHWte5YVTlrX4lIIL"]],[1,17,15,17]],[6,["_lscale"],[1,["b1HBcgI09QF61q38P3UcPY"]],[1,0.34,0.34,0.34]]]],5]],[1,["52Jz7GGJBZ4o3ZbXiqsxrh"]],[1,["dfAGouzABfyq7dirJtfDdp"]]],0,[0,-1,8,0,-2,7,0,2,1,0,0,1,0,-1,4,0,-2,7,0,-3,8,0,0,2,0,0,2,0,0,2,0,-1,6,0,0,4,0,0,4,0,-1,5,0,0,5,0,0,6,0,0,6,0,10,9,0,10,9,0,10,10,0,10,10,0,2,7,0,2,8,0,9,1,2,4,5,23],[0,0,0,0,0,0,0],[1,1,7,5,12,5,33],[130,9,9,131,2,132,133]],[[[38,"Material_Center",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.279,"roughness":0.734,"metallic":0.368,"specularIntensity":0.323},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[15,11],[134,135]],[[[23,".bin",1610563914,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":775880,"length":60012,"count":15003,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":775880,"count":13855,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-7.478819370269775,-0.007862542755901814,-9.398359298706055],"maxPosition",8,[1,17.437158584594727,17.669902801513672,9.69897174835205]]],-1],0,0,[],[],[]],[[[38,"Material #25",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080]]],11]]],0,0,[0],[11],[7]],[[[65],[30,"Market",[-2],[0,"fcTF/wge1Yj4RHb3yuihdn",-1,0]],[36,"Market",1,[[17,-3,[2,"beJUnU0W5bJpq3/vGbKzub"],[0],[14],1]],[0,"0eMbovdd9awYI3A+Yj2ebm",1,0],[1,0.8405440449714661,2.237990140914917,-37.72267150878906],[3,-5.3389325705350167e-8,0.7071631053332311,-8.428698212540567e-8,0.707050452553035],[1,0.3937009871006012,0.3937009871006012,0.3937009871006012],[1,0.0000025044784062979342,90.00912808225631,-0.000011155500900738616]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[136,137]],[[[20,"Map_BG"],[125,"Map_BG",[-2],[0,"52FZ4kbjJQ05Bh9aFNRMya",-1,0],[1,28.096,0,142.128],[1,3,3,3]],[36,"Map_BG",1,[[17,-3,[2,"24LpwU7LJZ3J1i5cPiv3OU"],[0],[14],1]],[0,"14HLs2dpxU7rXh+QNQS1J0",1,0],[1,28.08900260925293,1.6490017175674438,-49.35600662231445],[3,-0.0035387775737950886,0.04844189790965985,0.019909689133829126,0.9986212814970387],[1,0.3937009871006012,0.3937009871006012,0.3937009871006012],[1,-0.5158822610312086,5.564515049514396,2.259278361356487]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,138]],[[[20,"Apple_3"],[29,"Apple_3",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[36,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,0,0,-0.002],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,200,200,200],[1,-90,0,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,139]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[17],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[65],[30,"LandSlot_Select",[-2],[0,"65csPDHWte5YVTlrX4lIIL",-1,0]],[91,"Box001",1,[[17,-3,[2,"acy1vxWQBehK48PEkR+dir"],[0],[14],1]],[0,"b1HBcgI09QF61q38P3UcPY",1,0],[1,-0.1876899003982544,0,0.010877388529479504],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[140,141]],[[[23,".bin",3434013367,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0.16729655861854553]]],-1],0,0,[],[],[]],[[[38,"Material #2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[15,11],[142,7]],[[[20,"CurrencyEffect"],[40,"CurrencyEffect",[-4,-5,-6,-7,-8],[[39,-2,[2,"c6IoWm/TdIzbiGp4TgeBB/"]],[88,true,-3,[2,"a801k3rvxO1KXrgGqUvH+K"],[5],6]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[43,"Sprite",1,[[32,-9,[2,"9bG3j7UfVPtYTX3Xg4Vb2l"],[5,64,64]],[34,-10,[2,"2cKgXUc0NAlYpVVyQ7H40u"],0]],[0,"94kvGGpdNMdqfdIT2/3eUp",1,0],[3,0,0,0.4314717908231287,0.9021264289022256],[1,1.039,1.039,1.039],[1,0,0,51.122]],[43,"Sprite-001",1,[[32,-11,[2,"01F6+JYsNE5pDTzq1+b9tc"],[5,64,64]],[34,-12,[2,"28iHst2apIxLwbLL/VFyDX"],1]],[0,"38TK0vR7lBXJSnrsohQYeN",1,0],[3,0,0,-0.353572801310772,0.9354070099017077],[1,1.277,1.277,1.277],[1,0,0,-41.412]],[43,"Sprite-002",1,[[32,-13,[2,"5ekjbF3edM7IKPtZFSh26r"],[5,64,64]],[34,-14,[2,"05fCou7X5C55g6sz7AJfBp"],2]],[0,"e5d9/gcUBH3KHi2+KWC8P2",1,0],[3,0,0,0.8984954483317656,0.43898283488890477],[1,1.144,1.144,1.144],[1,0,0,127.922]],[43,"Sprite-003",1,[[32,-15,[2,"66UZPLnBNFdbiEnLweC+XO"],[5,64,64]],[34,-16,[2,"1aEIIFROZDZas4G8O5yLHr"],3]],[0,"41amGPB2tCb6NYmEuJh1Vh",1,0],[3,0,0,0.397956637184926,0.9174042265656209],[1,1.244,1.244,1.244],[1,0,0,46.901]],[47,"Sprite-004",1,[[32,-17,[2,"0bcNCmSeFJwK8H4a1VFeH1"],[5,64,64]],[34,-18,[2,"24yibu0tdCSJa1fIf3NQuX"],4]],[0,"2b0zJVuKlOQrowjmAH4hyI",1,0],[1,1.187,1.187,1.187]]],0,[0,2,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,9,1,18],[0,0,0,0,0,0,0],[1,1,1,1,1,-1,14],[10,10,10,10,10,54,54]],[[[20,"Apple_1"],[29,"Apple_1",[-2],[0,"8a478nDfZdfZlePO9DkB6i",-1,0],[1,0,0.1,0]],[36,"Sphere002",1,[[17,-3,[2,"a1BckIPApeTKW//pjKV0ui"],[0],[14],1]],[0,"4cQnPWGChar4kx6fvzqhQU",1,0],[1,0,0,-0.002],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,100,100,100],[1,-90,0,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[2,143]],[[[20,"Plant"],[40,"Plant",[-4],[[204,-2,[2,"5eQjsUjKtEWYuUtsJcky+K"],[[64,"plant_00",[6,7,8]],[64,"plant_01",[9,10,11]],[64,"plant_02",[12,13,14]],[64,"plant_03",[15,16,17]],[64,"plant_04",[18,19,20]]],21,22],[39,-3,[2,"6e/LuqlhtPFqToqDS3iUCP"]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[40,"ProgressBar",[-9,-10],[[32,-5,[2,"2cguNIOClF75vvSYYcarEK"],[5,130,22]],[157,1,0,true,-6,[2,"2cXw/dcAdKPZOB6w+opTC/"],5],[205,130,1,-8,[2,"576PLgR85GaZqBktGfietb"],-7]],[0,"62PGsx271JIroReawFeVm5",1,0]],[95,"RenderRoot2D",1,[-13,2],[[39,-11,[2,"edhYBaneJET5R/pAqZtnYt"]],[89,-12,[2,"dbP4fG+EZHLorwkdxA4jAN"]]],[0,"50inU5UR1DcbXaVD3bPzMC",1,0]],[126,"StatusNode",33554432,3,[-16],[[39,-14,[2,"0elwmh5jdOFYf6p7P3irvq"]],[88,true,-15,[2,"d4mx++h1NNzqTe5/Ok/qeu"],[2],3]],[0,"0bwDdgCQ9P+6szWe2JOOs1",1,0]],[94,"ico_event",33554432,4,[-19],[[50,-17,[2,"d5r4G1Nu9HXbbDGjf1dZso"],[5,134,164],[0,0.5,0]],[34,-18,[2,"30EPJ2WJlNTLzpzGK4CKNa"],1]],[0,"2dPv0nS5BJqKzBwpJ9ciei",1,0],[1,0.7,0.7,1]],[55,"Icon",33554432,5,[[32,-20,[2,"07chfQN9ZBy4bE/dSRBmf1"],[5,94,86]],[34,-21,[2,"52wpKOaH5MHZHTGvIxMYqC"],0]],[0,"f7Wn8r8WNBcLo1Xv9T8ph+",1,0],[1,0,97.424,0],[1,0.8,0.8,1]],[133,"Bar",33554432,2,[[[50,-22,[2,"63aM0VWlVPb73arZmnjvUJ"],[5,130,22],[0,0,0.5]],-23],4,1],[0,"30IO/W32tL9ax9jjYjk+zv",1,0],[1,-65,0,0]],[56,"Label",33554432,2,[[32,-24,[2,"0aCMCmguVMRqE0POxRCS5k"],[5,109.72,25]],[162,"00:00:00",25,25,25,false,-25,[2,"2fPFCMFvVO159+juFhhUiv"],4]],[0,"ccURRjhnFNVZgRMTDqHDmf",1,0],[1,0,3.166,0]],[158,1,0,7,[2,"7e0TekFc5JVJbRzPQu+9Hn"]]],0,[0,2,1,0,0,1,0,0,1,0,-1,3,0,0,2,0,0,2,0,34,9,0,0,2,0,-1,7,0,-2,8,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,-1,5,0,0,5,0,0,5,0,-1,6,0,0,6,0,0,6,0,0,7,0,-2,9,0,0,8,0,0,8,0,9,1,2,4,3,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9],[1,1,-1,14,8,1,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,13,35,1],[144,50,17,17,1,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8,161,162]],[[[23,".bin",3247487531,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8469104,"length":605220,"count":151305,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8469104,"count":151234,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-316.681640625,-15.045106887817383,-194.45132446289062],"maxPosition",8,[1,181.64317321777344,29.21985626220703,304.0953369140625]]],-1],0,0,[],[],[]],[[[20,"Water"],[30,"Water",[-2],[0,"5dKoQA71ZEp76xT0c5g+wz",-1,0]],[81,"Water",1,[-3],[0,"57w04KJXFEVpYLGX3s3BIR",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[144,0,0.3,0,2,[2,"0b7a7v3FVOCpzmec7amMlB"],[0],[42],[58,3,5,2],[5],[5],[25,0.3],[5],[5],[59,3,3.141592653589793],[5],[25,0.4],[25,-1],[25,200],[5],[83,true,[57,2,[4,4294246377],[4,4290957525]]],[150,true,0,1,0.1,3,0.3,0.5235987755982988,[25,1],[1,1,3,1]],[84,true,[44,1,[45,2,[0,1],[[153,2,0.5,0.55],[154,2,-1.52]]]],[5],[5],[5]],[85,[5],[5],[5],[25,1]],[71,[5],[5],[5]],[72,[5],[5],[5],[5]],[73,[5],[5],[5]],[74,true,4,4,1,[44,1,[45,2,[0,1],[[61,2,1,1],[53,2,1,1,1]]]],[5]],[75],[76,[25,1],[5],[42],[42],-4],[77,1,2]]],0,[0,2,1,0,-1,2,0,-1,3,0,17,3,0,9,1,4],[0,0,0],[-1,18,19],[15,15,19]],[[[206,"dcc/imported-specular-glossiness",[{"hash":2838361292,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":12,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float emissiveScale;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":142,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2373376484,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":57,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[23,".bin",1006198566,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":200312,"length":15336,"count":3834,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":200312,"count":3577,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-4.751381874084473,-0.03987198323011398,-6.88801908493042],"maxPosition",8,[1,5.005466461181641,26.04524040222168,8.10961627960205]]],-1],0,0,[],[],[]],[[[23,".bin",3342214139,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45304,"length":4884,"count":1221,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45304,"count":809,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.172447204589844,-8.172447204589844,-0.9626445174217224],"maxPosition",8,[1,8.17244815826416,8.17244815826416,8.207249641418457]]],-1],0,0,[],[],[]]]]
